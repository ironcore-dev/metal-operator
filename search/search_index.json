{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Metal-Operator Documentation","text":"<p>Welcome to the Metal-Operator Documentation!</p> <p>The <code>metal-operator</code> is a Kubernetes-native operator, part of the IronCore open-source project, designed for robust bare metal infrastructure management. By leveraging Baseboard Management Controllers (BMCs) and the Redfish API, <code>metal-operator</code> enables streamlined and automated server discovery, provisioning, and lifecycle management. Using the Kubernetes Controller pattern, <code>metal-operator</code> provides a CRD-based operational model that standardizes bare metal management across different hardware environments. Integration with vendor-specific tooling is also possible for enhanced functionality when needed.</p>"},{"location":"#key-features","title":"Key Features","text":""},{"location":"#1-discover-and-onboard-bare-metal-servers","title":"1. Discover and Onboard Bare Metal Servers","text":"<ul> <li>Automatically detect and register bare metal servers through BMCs and the Redfish API.</li> <li>Efficiently gather hardware specs, network configurations, and initial health checks directly from BMC interfaces.</li> </ul>"},{"location":"#2-provision-software-on-bare-metal-servers","title":"2. Provision Software on Bare Metal Servers","text":"<ul> <li>Deploy and configure software on registered servers using BMC interactions and standardized provisioning workflows.</li> <li>Support for dynamic software configuration and Redfish API-based management for consistent, vendor-neutral provisioning.</li> </ul>"},{"location":"#3-manage-server-reservations","title":"3. Manage Server Reservations","text":"<ul> <li>Reserve specific bare metal resources based on workload needs.</li> <li>Prevent resource conflicts by managing reservations via Kubernetes-native CRDs, ensuring that workloads align with available hardware resources.</li> </ul>"},{"location":"#4-perform-day-2-operations","title":"4. Perform Day 2 Operations","text":"<ul> <li>Utilize the Redfish API to manage BIOS, firmware, and driver updates.</li> <li>Automate ongoing maintenance tasks and operational workflows to maintain infrastructure resilience and uptime.</li> </ul>"},{"location":"#5-decommission-and-maintain-faulty-servers","title":"5. Decommission and Maintain Faulty Servers","text":"<ul> <li>Decommission servers via BMC controls for clean removal from active pools.</li> <li>Schedule and perform maintenance tasks with BMC data to optimize uptime and maintain hardware reliability.</li> </ul>"},{"location":"#how-it-works","title":"How It Works","text":"<p>The <code>metal-operator</code> relies on BMCs and the Redfish API to handle bare metal server management tasks. Through a CRD-based operational model, <code>metal-operator</code> provides Kubernetes-native management of bare metal infrastructure, enabling consistent, vendor-neutral interactions.</p>"},{"location":"#core-components","title":"Core Components","text":"<ul> <li>Custom Resources (CRs): Extend Kubernetes to manage server configurations, reservations, and operational workflows.</li> <li>Controllers: Automate lifecycle management through Redfish-enabled interactions, from provisioning to decommissioning.</li> <li>Reconcilers: Ensure the desired state matches the actual state by continuously monitoring hardware via BMC integrations.</li> </ul>"},{"location":"#architecture-overview","title":"Architecture Overview","text":"<ol> <li>Discovery: Register new bare metal servers through BMCs and Redfish API, creating CRDs for streamlined management.</li> <li>Provisioning: Apply software images and configurations using Redfish API, based on templates or custom configurations.</li> <li>Operations: Execute BIOS, firmware updates, and other maintenance tasks through standardized workflows.</li> <li>Decommissioning: Safely remove or maintain servers using Redfish and BMC controls, marking them for reuse or retirement as needed.</li> </ol> <p>The <code>metal-operator</code> is a core component of the IronCore project, designed to simplify and automate bare metal management across various hardware environments using BMC and Redfish API integrations. Expect continuous updates to expand capabilities and enhance usability.</p>"},{"location":"architecture/","title":"Metal-Operator Architectural Description","text":"<p>The metal-operator is a Kubernetes operator designed to manage bare metal servers within a Kubernetes environment. It automates the provisioning, configuration, and lifecycle management of physical servers by integrating them into Kubernetes using Custom Resource Definitions (CRDs) and controllers. The architecture promotes modularity, scalability, and flexibility, enabling seamless integration with various boot mechanisms and provisioning tools.</p>"},{"location":"architecture/#architectural-diagram","title":"Architectural Diagram","text":"<pre><code>flowchart LR\n    subgraph Out-of-Band Network\n        EndpointReconciler\n    end\n    EndpointReconciler -- Discovers --&gt; Endpoint\n    Endpoint -- Uses --&gt; MACPrefixDatabase\n    EndpointReconciler -- Creates --&gt; BMC &amp; BMCSecret\n\n    BMCReconciler -- Manages --&gt; BMC\n    BMCReconciler -- Uses --&gt; BMCSecret\n    BMCReconciler -- Discovers Servers --&gt; Server\n\n    ServerReconciler -- Manages state/Power --&gt; Server\n    ServerReconciler -- Uses --&gt; metalprobe\n    ServerReconciler -- Waits for --&gt; ServerBootConfiguration\n\n    ServerMaintenanceReconciler -- Manages --&gt; ServerMaintenance\n    ServerMaintenanceReconciler -- Creates/Deletes --&gt; ServerBootConfiguration\n    ServerMaintenanceReconciler -- Ensures Power --&gt; Server\n    ServerMaintenanceReconciler -- Patches Maintenace on --&gt; Server\n\n    ServerMaintenance -- References &lt;--&gt; Server\n\n    ServerClaimReconciler -- Manages --&gt; ServerClaim\n    ServerClaim -- References --&gt; Server\n    ServerClaimReconciler -- Creates --&gt; ServerBootConfiguration\n\n    BootOperator -- Watches --&gt; ServerBootConfiguration\n    BootOperator -- Prepares --&gt; BootEnvironment\n    BootOperator -- Updates --&gt; ServerBootConfiguration\n\n    BiosSettingsReconciler -- Discovers --&gt; BIOSSettings\n    BiosSettingsReconciler -- Creates/Deletes --&gt; ServerMaintenance\n    BIOSSettings -- References &lt;--&gt; Server\n\n    BiosVersionReconciler -- Discovers --&gt; BIOSVersion\n    BiosVersionReconciler -- Creates/Deletes --&gt; ServerMaintenance\n    BIOSVersion -- References --&gt; Server\n\n    BMCSettingsReconciler -- Discovers --&gt; BMCSettings\n    BMCSettingsReconciler -- Creates/Deletes --&gt; ServerMaintenance\n    BMCSettings -- References --&gt; Server\n    BMCSettings -- References &lt;--&gt; BMC\n\n    BMCVersionReconciler -- Discovers --&gt; BMCVersion\n    BMCVersionReconciler -- Creates/Deletes --&gt; ServerMaintenance\n    BMCVersion -- References --&gt; Server\n    BMCVersion -- References --&gt; BMC\n\n    classDef operator fill:#9575cd, stroke:#000, stroke-width:2px, color:#000;\n    classDef crd fill:#4db6ac, stroke:#000, stroke-width:2px, color:#000;\n    classDef external fill:#f48fb1, stroke:#000, stroke-width:2px, color:#000;\n\n    class EndpointReconciler,BMCReconciler,ServerReconciler,ServerClaimReconciler,ServerMaintenanceReconciler,BiosSettingsReconciler,BiosVersionReconciler,BMCSettingsReconciler,BMCVersionReconciler operator;\n    class Endpoint,BMC,BMCSecret,Server,ServerClaim,ServerBootConfiguration,ServerMaintenance,BMCSettings,BMCVersion,BIOSVersion,BIOSSettings crd;\n    class BootOperator external;</code></pre>"},{"location":"architecture/#key-components","title":"Key Components","text":""},{"location":"architecture/#1-custom-resource-definitions-crds","title":"1. Custom Resource Definitions (CRDs)","text":"<ul> <li>Endpoint: Represents devices on the out-of-band management network, identified by MAC and IP addresses.</li> <li>BMC: Models Baseboard Management Controllers (BMCs), allowing interaction with server hardware.</li> <li>BMCSecret: Securely stores credentials required to access BMCs.</li> <li>Server: Represents physical servers, managing their state, power, and configurations.</li> <li>ServerClaim: Allows users to reserve servers by specifying desired configurations and boot images.</li> <li>ServerBootConfiguration: Signals the need to prepare the boot environment for a server.</li> <li>BIOSSettings: Handles updating the BIOS setting on the physical server's BIOS.</li> <li>BIOSVersion: Handles upgrading the BIOS Version on the physical server's BIOS.</li> <li>BMCSettings: Handles updating the BMC setting on the physical server's Manager.</li> <li>BMCVersion: Handles upgrading the BMC Version on the physical server's Manager.</li> </ul>"},{"location":"architecture/#2-controllers","title":"2. Controllers","text":"<ul> <li> <p>EndpointReconciler: Discovers devices on the out-of-band network by processing <code>Endpoint</code> resources. It uses a MAC Prefix Database to identify device types, vendors, protocols, and default credentials. When a BMC is detected, it creates corresponding <code>BMC</code> and <code>BMCSecret</code> resources.</p> </li> <li> <p>BMCReconciler: Manages <code>BMC</code> resources by connecting to BMC devices using credentials from <code>BMCSecret</code>. It retrieves hardware information, updates the BMC status, and detects managed servers, creating <code>Server</code> resources for them.</p> </li> <li> <p>ServerReconciler: Manages <code>Server</code> resources and their lifecycle states. During the Discovery phase, it interacts with BMCs and uses the metalprobe agent to collect in-band hardware information, updating the server's status. It handles power management, BIOS configurations, and transitions servers through various states (e.g., Initial, Discovery, Available, Reserved).</p> </li> <li> <p>ServerClaimReconciler: Handles <code>ServerClaim</code> resources, allowing users to reserve servers. Upon creation of a <code>ServerClaim</code>, it allocates an available server, transitions it to the Reserved state, and creates a <code>ServerBootConfiguration</code>. When the claim is deleted, it releases the server, transitioning it to the Cleanup state for sanitization.</p> </li> <li> <p>BIOSSettingsReconciler: Handles <code>BIOSSettings</code> resource. Provides ability to update the bios settings on physical server's BIOS.</p> </li> <li>BiosVersionReconciler: Handles <code>BIOSVersion</code> resource. Provides ability to upgrade the bios version on physical server's BIOS.</li> <li>BMCSettingsReconciler: Handles <code>BMCSettings</code> resource. Provides ability to update the bmc settings on physical server's Manager.</li> <li> <p>BMCVersionReconciler: Handles <code>BMCVersion</code> resource. Provides ability to upgrade the bmc version on physical server's Manager.</p> </li> <li> <p>Boot Operator (External Component): Monitors <code>ServerBootConfiguration</code> resources to prepare the boot environment (e.g., configuring DHCP, PXE servers). Once the boot environment is ready, it updates the <code>ServerBootConfiguration</code> status to Ready.</p> </li> </ul>"},{"location":"architecture/#workflow-summary","title":"Workflow Summary","text":"<ol> <li> <p>Discovery and Initialization:</p> <ul> <li>The EndpointReconciler discovers devices on the out-of-band network, creating <code>Endpoint</code> resources.</li> <li>BMCs are identified using the MAC Prefix Database, leading to the creation of <code>BMC</code> and <code>BMCSecret</code> resources.</li> <li>The BMCReconciler connects to BMCs, gathers hardware details, and creates <code>Server</code> resources for each managed server.</li> </ul> </li> <li> <p>Server Discovery Phase:</p> <ul> <li>The ServerReconciler enters the Discovery phase, interacting with BMCs and booting servers using a predefined ignition.</li> <li>The metalprobe agent runs on the servers, collecting detailed hardware information (e.g., network interfaces, storage devices) and reporting back to update the <code>Server</code> status.</li> </ul> </li> <li> <p>Server Availability:</p> <ul> <li>Once discovery is complete, servers transition to the Available state, ready to be claimed.</li> </ul> </li> <li> <p>Server Reservation and Boot Configuration:</p> <ul> <li>Users create <code>ServerClaim</code> resources to reserve servers, specifying desired OS images and ignition configurations.</li> <li>The ServerClaimReconciler allocates servers, transitions them to the Reserved state, and creates <code>ServerBootConfiguration</code> resources.</li> </ul> </li> <li> <p>Boot Environment Preparation:</p> <ul> <li>External components (e.g., boot-operator) watch for <code>ServerBootConfiguration</code> resources and prepare the boot environment accordingly.</li> <li>Once the environment is ready, they update the <code>ServerBootConfiguration</code> status to Ready.</li> </ul> </li> <li> <p>Server Power-On and Usage:</p> <ul> <li>The ServerReconciler detects the ready status and powers on the server.</li> <li>The server boots using the specified image and ignition configuration.</li> </ul> </li> <li> <p>Cleanup and Maintenance:</p> <ul> <li>When a <code>ServerClaim</code> is deleted, the server transitions to the Cleanup state.</li> <li>The ServerReconciler performs sanitization tasks (e.g., wiping disks, resetting configurations) before returning the server to the Available state.</li> <li>Servers can enter the Maintenance state for updates or repairs.</li> </ul> </li> </ol>"},{"location":"architecture/#architectural-benefits","title":"Architectural Benefits","text":"<ul> <li>Modularity: Separation of concerns allows for flexible integration with various boot mechanisms and provisioning tools (e.g., OpenStack Ironic, custom solutions).</li> <li>Scalability: Automates the management of large numbers of servers through Kubernetes CRDs and controllers.</li> <li>Extensibility: Supports customization through additional CRDs and operators, enabling adaptation to specific infrastructure needs.</li> <li>Security: Manages sensitive information like BMC credentials using Kubernetes Secrets and enforces access control via RBAC policies.</li> <li>Automation: Streamlines hardware provisioning, configuration, and lifecycle management, reducing manual intervention and potential errors.</li> </ul>"},{"location":"api-reference/api/","title":"API Reference","text":"<p>Packages:</p> <ul> <li> metal.ironcore.dev/v1alpha1 </li> </ul>"},{"location":"api-reference/api/#metal.ironcore.dev/v1alpha1","title":"metal.ironcore.dev/v1alpha1","text":"<p>Package v1alpha1 contains API Schema definitions for the settings.gardener.cloud API group</p> <p>Resource Types:</p>"},{"location":"api-reference/api/#metal.ironcore.dev/v1alpha1.BIOSSettingUpdateState","title":"BIOSSettingUpdateState (<code>string</code> alias)","text":"<p> (Appears on:BIOSSettingsStatus) </p> Value Description <p>\"IssueSettingUpdate\"</p> <p>BIOSSettingUpdateStateIssue specifies that the bios new setting was posted to server\u2019s RedFish API</p> <p>\"VerifySettingUpdate\"</p> <p>BIOSSettingUpdateStateVerification specifies that the bios setting is beening verified.</p> <p>\"WaitOnServerRebootPowerOff\"</p> <p>BIOSSettingUpdateWaitOnServerRebootPowerOff specifies that the bios setting state is waiting on server to turn off during Reboot.</p> <p>\"WaitOnServerRebootPowerOn\"</p> <p>BIOSSettingUpdateWaitOnServerRebootPowerOn specifies that the bios setting state is waiting on server to turn on during Reboot.</p>"},{"location":"api-reference/api/#metal.ironcore.dev/v1alpha1.BIOSSettings","title":"BIOSSettings","text":"<p>BIOSSettings is the Schema for the biossettings API.</p> Field Description <code>metadata</code>  Kubernetes meta/v1.ObjectMeta   Refer to the Kubernetes API documentation for the fields of the <code>metadata</code> field.  <code>spec</code>  BIOSSettingsSpec  <code>version</code>  string  <p>Version contains software (eg: BIOS, BMC) version this settings applies to</p> <code>settings</code>  map[string]string  (Optional) <p>SettingsMap contains software (eg: BIOS, BMC) settings as map</p> <code>serverRef</code>  Kubernetes core/v1.LocalObjectReference  <p>ServerRef is a reference to a specific server to apply bios setting on.</p> <code>serverMaintenancePolicy</code>  ServerMaintenancePolicy  <p>ServerMaintenancePolicy is maintenance policy to be enforced on the server.</p> <code>serverMaintenanceRef</code>  Kubernetes core/v1.ObjectReference  <p>ServerMaintenanceRef is a reference to a ServerMaintenance object that BiosSetting has requested for the referred server.</p> <code>status</code>  BIOSSettingsStatus"},{"location":"api-reference/api/#metal.ironcore.dev/v1alpha1.BIOSSettingsSpec","title":"BIOSSettingsSpec","text":"<p> (Appears on:BIOSSettings) </p> <p>BIOSSettingsSpec defines the desired state of BIOSSettings.</p> Field Description <code>version</code>  string  <p>Version contains software (eg: BIOS, BMC) version this settings applies to</p> <code>settings</code>  map[string]string  (Optional) <p>SettingsMap contains software (eg: BIOS, BMC) settings as map</p> <code>serverRef</code>  Kubernetes core/v1.LocalObjectReference  <p>ServerRef is a reference to a specific server to apply bios setting on.</p> <code>serverMaintenancePolicy</code>  ServerMaintenancePolicy  <p>ServerMaintenancePolicy is maintenance policy to be enforced on the server.</p> <code>serverMaintenanceRef</code>  Kubernetes core/v1.ObjectReference  <p>ServerMaintenanceRef is a reference to a ServerMaintenance object that BiosSetting has requested for the referred server.</p>"},{"location":"api-reference/api/#metal.ironcore.dev/v1alpha1.BIOSSettingsState","title":"BIOSSettingsState (<code>string</code> alias)","text":"<p> (Appears on:BIOSSettingsStatus) </p> <p>BIOSSettingsState specifies the current state of the BIOS maintenance.</p> Value Description <p>\"Applied\"</p> <p>BIOSSettingsStateApplied specifies that the bios setting maintenance has been completed.</p> <p>\"Failed\"</p> <p>BIOSSettingsStateFailed specifies that the bios setting maintenance has failed.</p> <p>\"InProgress\"</p> <p>BIOSSettingsStateInProgress specifies that the BIOSSetting Controller is updating the settings</p> <p>\"Pending\"</p> <p>BIOSSettingsStatePending specifies that the bios setting maintenance is waiting</p>"},{"location":"api-reference/api/#metal.ironcore.dev/v1alpha1.BIOSSettingsStatus","title":"BIOSSettingsStatus","text":"<p> (Appears on:BIOSSettings) </p> <p>BIOSSettingsStatus defines the observed state of BIOSSettings.</p> Field Description <code>state</code>  BIOSSettingsState  <p>State represents the current state of the bios configuration task.</p> <code>updateSettingState</code>  BIOSSettingUpdateState  <p>UpdateSettingState represents the current state of the bios setting update task.</p>"},{"location":"api-reference/api/#metal.ironcore.dev/v1alpha1.BIOSVersion","title":"BIOSVersion","text":"<p>BIOSVersion is the Schema for the biosversions API.</p> Field Description <code>metadata</code>  Kubernetes meta/v1.ObjectMeta   Refer to the Kubernetes API documentation for the fields of the <code>metadata</code> field.  <code>spec</code>  BIOSVersionSpec  <code>version</code>  string  <p>Version contains BIOS version to upgrade to</p> <code>updatePolicy</code>  UpdatePolicy  <p>An indication of whether the server\u2019s upgrade service should bypass vendor update policies</p> <code>image</code>  ImageSpec  <p>details regarding the image to use to upgrade to given BIOS version</p> <code>serverRef</code>  Kubernetes core/v1.LocalObjectReference  <p>ServerRef is a reference to a specific server to apply bios upgrade on.</p> <code>serverMaintenancePolicy</code>  ServerMaintenancePolicy  <p>ServerMaintenancePolicy is maintenance policy to be enforced on the server.</p> <code>serverMaintenanceRef</code>  Kubernetes core/v1.ObjectReference  <p>ServerMaintenanceRef is a reference to a ServerMaintenance object that that Controller has requested for the referred server.</p> <code>status</code>  BIOSVersionStatus"},{"location":"api-reference/api/#metal.ironcore.dev/v1alpha1.BIOSVersionSpec","title":"BIOSVersionSpec","text":"<p> (Appears on:BIOSVersion) </p> <p>BIOSVersionSpec defines the desired state of BIOSVersion.</p> Field Description <code>version</code>  string  <p>Version contains BIOS version to upgrade to</p> <code>updatePolicy</code>  UpdatePolicy  <p>An indication of whether the server\u2019s upgrade service should bypass vendor update policies</p> <code>image</code>  ImageSpec  <p>details regarding the image to use to upgrade to given BIOS version</p> <code>serverRef</code>  Kubernetes core/v1.LocalObjectReference  <p>ServerRef is a reference to a specific server to apply bios upgrade on.</p> <code>serverMaintenancePolicy</code>  ServerMaintenancePolicy  <p>ServerMaintenancePolicy is maintenance policy to be enforced on the server.</p> <code>serverMaintenanceRef</code>  Kubernetes core/v1.ObjectReference  <p>ServerMaintenanceRef is a reference to a ServerMaintenance object that that Controller has requested for the referred server.</p>"},{"location":"api-reference/api/#metal.ironcore.dev/v1alpha1.BIOSVersionState","title":"BIOSVersionState (<code>string</code> alias)","text":"<p> (Appears on:BIOSVersionStatus) </p> Value Description <p>\"Completed\"</p> <p>BIOSVersionStateCompleted specifies that the bios upgrade maintenance has been completed.</p> <p>\"Failed\"</p> <p>BIOSVersionStateFailed specifies that the bios upgrade maintenance has failed.</p> <p>\"Processing\"</p> <p>BIOSVersionStateInProgress specifies that upgrading bios is in progress.</p> <p>\"Pending\"</p> <p>BIOSVersionStatePending specifies that the bios upgrade maintenance is waiting</p>"},{"location":"api-reference/api/#metal.ironcore.dev/v1alpha1.BIOSVersionStatus","title":"BIOSVersionStatus","text":"<p> (Appears on:BIOSVersion) </p> <p>BIOSVersionStatus defines the observed state of BIOSVersion.</p> Field Description <code>state</code>  BIOSVersionState  <p>State represents the current state of the bios configuration task.</p> <code>upgradeTask</code>  TaskStatus  <p>UpgradeTask contains the state of the Upgrade Task created by the BMC</p> <code>conditions</code>  []Kubernetes meta/v1.Condition  (Optional) <p>Conditions represents the latest available observations of the Bios version upgrade state.</p>"},{"location":"api-reference/api/#metal.ironcore.dev/v1alpha1.BMC","title":"BMC","text":"<p>BMC is the Schema for the bmcs API</p> Field Description <code>metadata</code>  Kubernetes meta/v1.ObjectMeta   Refer to the Kubernetes API documentation for the fields of the <code>metadata</code> field.  <code>spec</code>  BMCSpec  <code>endpointRef</code>  Kubernetes core/v1.LocalObjectReference  (Optional) <p>EndpointRef is a reference to the Kubernetes object that contains the endpoint information for the BMC. This reference is typically used to locate the BMC endpoint within the cluster.</p> <code>access</code>  InlineEndpoint  (Optional) <p>Endpoint allows inline configuration of network access details for the BMC. Use this field if access settings like address are to be configured directly within the BMC resource.</p> <code>bmcSecretRef</code>  Kubernetes core/v1.LocalObjectReference  <p>BMCSecretRef is a reference to the Kubernetes Secret object that contains the credentials required to access the BMC. This secret includes sensitive information such as usernames and passwords.</p> <code>protocol</code>  Protocol  <p>Protocol specifies the protocol to be used for communicating with the BMC. It could be a standard protocol such as IPMI or Redfish.</p> <code>consoleProtocol</code>  ConsoleProtocol  (Optional) <p>ConsoleProtocol specifies the protocol to be used for console access to the BMC. This field is optional and can be omitted if console access is not required.</p> <code>status</code>  BMCStatus"},{"location":"api-reference/api/#metal.ironcore.dev/v1alpha1.BMCAccess","title":"BMCAccess","text":"<p> (Appears on:ServerSpec) </p> <p>BMCAccess defines the access details for the BMC.</p> Field Description <code>protocol</code>  Protocol  <p>Protocol specifies the protocol to be used for communicating with the BMC.</p> <code>address</code>  string  <p>Address is the address of the BMC.</p> <code>bmcSecretRef</code>  Kubernetes core/v1.LocalObjectReference  <p>BMCSecretRef is a reference to the Kubernetes Secret object that contains the credentials required to access the BMC. This secret includes sensitive information such as usernames and passwords.</p>"},{"location":"api-reference/api/#metal.ironcore.dev/v1alpha1.BMCPowerState","title":"BMCPowerState (<code>string</code> alias)","text":"<p> (Appears on:BMCStatus) </p> <p>BMCPowerState defines the possible power states for a BMC.</p> Value Description <p>\"Off\"</p> <p>OffPowerState the system is powered off, although some components may continue to have AUX power such as management controller.</p> <p>\"On\"</p> <p>OnPowerState the system is powered on.</p> <p>\"Paused\"</p> <p>PausedPowerState the system is paused.</p> <p>\"PoweringOff\"</p> <p>PoweringOffPowerState A temporary state between On and Off. The power off action can take time while the OS is in the shutdown process.</p> <p>\"PoweringOn\"</p> <p>PoweringOnPowerState A temporary state between Off and On. This temporary state can be very short.</p>"},{"location":"api-reference/api/#metal.ironcore.dev/v1alpha1.BMCSecret","title":"BMCSecret","text":"<p>BMCSecret is the Schema for the bmcsecrets API</p> Field Description <code>metadata</code>  Kubernetes meta/v1.ObjectMeta  (Optional) <p>Standard object\u2019s metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata</p> Refer to the Kubernetes API documentation for the fields of the <code>metadata</code> field.  <code>immutable</code>  bool  (Optional) <p>Immutable, if set to true, ensures that data stored in the Secret cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil.</p> <code>data</code>  map[string][]byte  (Optional) <p>Data contains the secret data. Each key must consist of alphanumeric characters, \u2018-\u2019, \u2018_\u2019 or \u2018.\u2019. The serialized form of the secret data is a base64 encoded string, representing the arbitrary (possibly non-string) data value here. Described in https://tools.ietf.org/html/rfc4648#section-4</p> <code>stringData</code>  map[string]string  (Optional) <p>stringData allows specifying non-binary secret data in string form. It is provided as a write-only input field for convenience. All keys and values are merged into the data field on write, overwriting any existing values. The stringData field is never output when reading from the API.</p> <code>type</code>  Kubernetes core/v1.SecretType  (Optional) <p>Used to facilitate programmatic handling of secret data. More info: https://kubernetes.io/docs/concepts/configuration/secret/#secret-types</p>"},{"location":"api-reference/api/#metal.ironcore.dev/v1alpha1.BMCSpec","title":"BMCSpec","text":"<p> (Appears on:BMC) </p> <p>BMCSpec defines the desired state of BMC</p> Field Description <code>endpointRef</code>  Kubernetes core/v1.LocalObjectReference  (Optional) <p>EndpointRef is a reference to the Kubernetes object that contains the endpoint information for the BMC. This reference is typically used to locate the BMC endpoint within the cluster.</p> <code>access</code>  InlineEndpoint  (Optional) <p>Endpoint allows inline configuration of network access details for the BMC. Use this field if access settings like address are to be configured directly within the BMC resource.</p> <code>bmcSecretRef</code>  Kubernetes core/v1.LocalObjectReference  <p>BMCSecretRef is a reference to the Kubernetes Secret object that contains the credentials required to access the BMC. This secret includes sensitive information such as usernames and passwords.</p> <code>protocol</code>  Protocol  <p>Protocol specifies the protocol to be used for communicating with the BMC. It could be a standard protocol such as IPMI or Redfish.</p> <code>consoleProtocol</code>  ConsoleProtocol  (Optional) <p>ConsoleProtocol specifies the protocol to be used for console access to the BMC. This field is optional and can be omitted if console access is not required.</p>"},{"location":"api-reference/api/#metal.ironcore.dev/v1alpha1.BMCState","title":"BMCState (<code>string</code> alias)","text":"<p> (Appears on:BMCStatus) </p> <p>BMCState defines the possible states of a BMC.</p> Value Description <p>\"Enabled\"</p> <p>BMCStateEnabled indicates that the BMC is enabled and functioning correctly.</p> <p>\"Error\"</p> <p>BMCStateError indicates that there is an error with the BMC.</p>"},{"location":"api-reference/api/#metal.ironcore.dev/v1alpha1.BMCStatus","title":"BMCStatus","text":"<p> (Appears on:BMC) </p> <p>BMCStatus defines the observed state of BMC.</p> Field Description <code>macAddress</code>  string  <p>MACAddress is the MAC address of the BMC. The format is validated using a regular expression pattern.</p> <code>ip</code>  IP  <p>IP is the IP address of the BMC. The type is specified as string and is schemaless.</p> <code>manufacturer</code>  string  <p>Manufacturer is the name of the BMC manufacturer.</p> <code>model</code>  string  <p>Model is the model number or name of the BMC.</p> <code>sku</code>  string  <p>SKU is the stock keeping unit identifier for the BMC.</p> <code>serialNumber</code>  string  <p>SerialNumber is the serial number of the BMC.</p> <code>firmwareVersion</code>  string  <p>FirmwareVersion is the version of the firmware currently running on the BMC.</p> <code>state</code>  BMCState  <p>State represents the current state of the BMC.</p> <code>powerState</code>  BMCPowerState  <p>PowerState represents the current power state of the BMC.</p> <code>conditions</code>  []Kubernetes meta/v1.Condition  (Optional) <p>Conditions represents the latest available observations of the BMC\u2019s current state.</p>"},{"location":"api-reference/api/#metal.ironcore.dev/v1alpha1.BootOrder","title":"BootOrder","text":"<p> (Appears on:ServerSpec) </p> <p>BootOrder represents the boot order of the server.</p> Field Description <code>name</code>  string  <p>Name is the name of the boot device.</p> <code>priority</code>  int  <p>Priority is the priority of the boot device.</p> <code>device</code>  string  <p>Device is the device to boot from.</p>"},{"location":"api-reference/api/#metal.ironcore.dev/v1alpha1.ConsoleProtocol","title":"ConsoleProtocol","text":"<p> (Appears on:BMCSpec) </p> <p>ConsoleProtocol defines the protocol and port used for console access to the BMC.</p> Field Description <code>name</code>  ConsoleProtocolName  <p>Name specifies the name of the console protocol. This could be a protocol such as \u201cSSH\u201d, \u201cTelnet\u201d, etc.</p> <code>port</code>  int32  <p>Port specifies the port number used for console access. This port is used by the specified console protocol to establish connections.</p>"},{"location":"api-reference/api/#metal.ironcore.dev/v1alpha1.ConsoleProtocolName","title":"ConsoleProtocolName (<code>string</code> alias)","text":"<p> (Appears on:ConsoleProtocol) </p> <p>ConsoleProtocolName defines the possible names for console protocols.</p> Value Description <p>\"IPMI\"</p> <p>ConsoleProtocolNameIPMI represents the IPMI console protocol.</p> <p>\"SSH\"</p> <p>ConsoleProtocolNameSSH represents the SSH console protocol.</p> <p>\"SSHLenovo\"</p> <p>ConsoleProtocolNameSSHLenovo represents the SSH console protocol specific to Lenovo hardware.</p>"},{"location":"api-reference/api/#metal.ironcore.dev/v1alpha1.Endpoint","title":"Endpoint","text":"<p>Endpoint is the Schema for the endpoints API</p> Field Description <code>metadata</code>  Kubernetes meta/v1.ObjectMeta   Refer to the Kubernetes API documentation for the fields of the <code>metadata</code> field.  <code>spec</code>  EndpointSpec  <code>macAddress</code>  string  <p>MACAddress is the MAC address of the endpoint.</p> <code>ip</code>  IP  <p>IP is the IP address of the endpoint.</p> <code>status</code>  EndpointStatus"},{"location":"api-reference/api/#metal.ironcore.dev/v1alpha1.EndpointSpec","title":"EndpointSpec","text":"<p> (Appears on:Endpoint) </p> <p>EndpointSpec defines the desired state of Endpoint</p> Field Description <code>macAddress</code>  string  <p>MACAddress is the MAC address of the endpoint.</p> <code>ip</code>  IP  <p>IP is the IP address of the endpoint.</p>"},{"location":"api-reference/api/#metal.ironcore.dev/v1alpha1.EndpointStatus","title":"EndpointStatus","text":"<p> (Appears on:Endpoint) </p> <p>EndpointStatus defines the observed state of Endpoint</p>"},{"location":"api-reference/api/#metal.ironcore.dev/v1alpha1.IP","title":"IP","text":"<p> (Appears on:BMCStatus, EndpointSpec, InlineEndpoint, NetworkInterface) </p> <p>IP is an IP address.</p> Field Description <code>-</code>  net/netip.Addr"},{"location":"api-reference/api/#metal.ironcore.dev/v1alpha1.IPPrefix","title":"IPPrefix","text":"<p>IPPrefix represents a network prefix.</p> Field Description <code>-</code>  net/netip.Prefix"},{"location":"api-reference/api/#metal.ironcore.dev/v1alpha1.ImageSpec","title":"ImageSpec","text":"<p> (Appears on:BIOSVersionSpec) </p> Field Description <code>secretRef</code>  Kubernetes core/v1.LocalObjectReference  <p>ImageSecretRef is a reference to the Kubernetes Secret (of type SecretTypeBasicAuth) object that contains the credentials to access the ImageURI. This secret includes sensitive information such as usernames and passwords.</p> <code>transferProtocol</code>  string  <p>The network protocol that the server\u2019s update service uses to retrieve \u2018ImageURI\u2019</p> <code>URI</code>  string  <p>The URI of the software image to update/install.\u201d</p>"},{"location":"api-reference/api/#metal.ironcore.dev/v1alpha1.IndicatorLED","title":"IndicatorLED (<code>string</code> alias)","text":"<p> (Appears on:ServerSpec, ServerStatus) </p> <p>IndicatorLED represents LED indicator states</p> Value Description <p>\"Blinking\"</p> <p>BlinkingIndicatorLED indicates the Indicator LED is blinking.</p> <p>\"Lit\"</p> <p>LitIndicatorLED indicates the Indicator LED is lit.</p> <p>\"Off\"</p> <p>OffIndicatorLED indicates the Indicator LED is off.</p> <p>\"Unknown\"</p> <p>UnknownIndicatorLED indicates the state of the Indicator LED cannot be determined.</p>"},{"location":"api-reference/api/#metal.ironcore.dev/v1alpha1.InlineEndpoint","title":"InlineEndpoint","text":"<p> (Appears on:BMCSpec) </p> <p>InlineEndpoint defines inline network access configuration for the BMC.</p> Field Description <code>macAddress</code>  string  <p>MACAddress is the MAC address of the endpoint.</p> <code>ip</code>  IP  <p>IP is the IP address of the BMC.</p>"},{"location":"api-reference/api/#metal.ironcore.dev/v1alpha1.NetworkInterface","title":"NetworkInterface","text":"<p> (Appears on:ServerStatus) </p> <p>NetworkInterface defines the details of a network interface.</p> Field Description <code>name</code>  string  <p>Name is the name of the network interface.</p> <code>ip</code>  IP  <p>IP is the IP address assigned to the network interface. The type is specified as string and is schemaless.</p> <code>macAddress</code>  string  <p>MACAddress is the MAC address of the network interface.</p>"},{"location":"api-reference/api/#metal.ironcore.dev/v1alpha1.Phase","title":"Phase (<code>string</code> alias)","text":"<p> (Appears on:ServerClaimStatus) </p> <p>Phase defines the possible phases of a ServerClaim.</p> Value Description <p>\"Bound\"</p> <p>PhaseBound indicates that the server claim is bound to a server.</p> <p>\"Unbound\"</p> <p>PhaseUnbound indicates that the server claim is not bound to any server.</p>"},{"location":"api-reference/api/#metal.ironcore.dev/v1alpha1.Power","title":"Power (<code>string</code> alias)","text":"<p> (Appears on:ServerClaimSpec, ServerMaintenanceSpec, ServerSpec) </p> <p>Power defines the possible power states for a device.</p> Value Description <p>\"Off\"</p> <p>PowerOff indicates that the device is powered off.</p> <p>\"On\"</p> <p>PowerOn indicates that the device is powered on.</p>"},{"location":"api-reference/api/#metal.ironcore.dev/v1alpha1.Processor","title":"Processor","text":"<p> (Appears on:ServerStatus) </p> <p>Processor defines the details of a Processor.</p> Field Description <code>id</code>  string  <p>ID is the name of the Processor.</p> <code>type</code>  string  <p>Type is the type of the Processor.</p> <code>architecture</code>  string  <p>Architecture is the architecture of the Processor.</p> <code>instructionSet</code>  string  <p>InstructionSet is the instruction set of the Processor.</p> <code>manufacturer</code>  string  <p>Manufacturer is the manufacturer of the Processor.</p> <code>model</code>  string  <p>Model is the model of the Processor.</p> <code>maxSpeedMHz</code>  int32  <p>MaxSpeedMHz is the maximum speed of the Processor in MHz.</p> <code>totalCores</code>  int32  <p>TotalCores is the total number of cores in the Processor.</p> <code>totalThreads</code>  int32  <p>TotalThreads is the total number of threads in the Processor.</p>"},{"location":"api-reference/api/#metal.ironcore.dev/v1alpha1.Protocol","title":"Protocol","text":"<p> (Appears on:BMCAccess, BMCSpec) </p> <p>Protocol defines the protocol and port used for communicating with the BMC.</p> Field Description <code>name</code>  ProtocolName  <p>Name specifies the name of the protocol. This could be a protocol such as \u201cIPMI\u201d, \u201cRedfish\u201d, etc.</p> <code>port</code>  int32  <p>Port specifies the port number used for communication. This port is used by the specified protocol to establish connections.</p> <code>scheme</code>  ProtocolScheme  <p>Scheme specifies the scheme used for communication.</p>"},{"location":"api-reference/api/#metal.ironcore.dev/v1alpha1.ProtocolName","title":"ProtocolName (<code>string</code> alias)","text":"<p> (Appears on:Protocol) </p> <p>ProtocolName defines the possible names for protocols used for communicating with the BMC.</p> Value Description <p>\"IPMI\"</p> <p>ProtocolNameIPMI represents the IPMI protocol.</p> <p>\"Redfish\"</p> <p>ProtocolNameRedfish represents the Redfish protocol.</p> <p>\"SSH\"</p> <p>ProtocolNameSSH represents the SSH protocol.</p>"},{"location":"api-reference/api/#metal.ironcore.dev/v1alpha1.ProtocolScheme","title":"ProtocolScheme (<code>string</code> alias)","text":"<p> (Appears on:Protocol) </p> <p>ProtocolScheme is a string that contains the protocol scheme</p> Value Description <p>\"http\"</p> <p>HTTPProtocolScheme is the http protocol scheme</p> <p>\"https\"</p> <p>HTTPSProtocolScheme is the https protocol scheme</p>"},{"location":"api-reference/api/#metal.ironcore.dev/v1alpha1.Server","title":"Server","text":"<p>Server is the Schema for the servers API</p> Field Description <code>metadata</code>  Kubernetes meta/v1.ObjectMeta   Refer to the Kubernetes API documentation for the fields of the <code>metadata</code> field.  <code>spec</code>  ServerSpec  <code>uuid</code>  string  <p>UUID is the unique identifier for the server. Deprecated in favor of systemUUID.</p> <code>systemUUID</code>  string  <p>SystemUUID is the unique identifier for the server.</p> <code>power</code>  Power  <p>Power specifies the desired power state of the server.</p> <code>indicatorLED</code>  IndicatorLED  <p>IndicatorLED specifies the desired state of the server\u2019s indicator LED.</p> <code>serverClaimRef</code>  Kubernetes core/v1.ObjectReference  <p>ServerClaimRef is a reference to a ServerClaim object that claims this server. This field is optional and can be omitted if no claim is associated with this server.</p> <code>serverMaintenanceRef</code>  Kubernetes core/v1.ObjectReference  <p>ServerMaintenanceRef is a reference to a ServerMaintenance object that maintains this server.</p> <code>bmcRef</code>  Kubernetes core/v1.LocalObjectReference  <p>BMCRef is a reference to the BMC object associated with this server. This field is optional and can be omitted if no BMC is associated with this server.</p> <code>bmc</code>  BMCAccess  <p>BMC contains the access details for the BMC. This field is optional and can be omitted if no BMC access is specified.</p> <code>bootConfigurationRef</code>  Kubernetes core/v1.ObjectReference  <p>BootConfigurationRef is a reference to a BootConfiguration object that specifies the boot configuration for this server. This field is optional and can be omitted if no boot configuration is specified.</p> <code>maintenanceBootConfigurationRef</code>  Kubernetes core/v1.ObjectReference  <p>MaintenanceBootConfigurationRef is a reference to a BootConfiguration object that specifies the boot configuration for this server during maintenance. This field is optional and can be omitted</p> <code>bootOrder</code>  []BootOrder  <p>BootOrder specifies the boot order of the server.</p> <code>biosSettingsRef</code>  Kubernetes core/v1.LocalObjectReference  <p>BIOSSettingsRef is a reference to a biossettings object that specifies the BIOS configuration for this server.</p> <code>status</code>  ServerStatus"},{"location":"api-reference/api/#metal.ironcore.dev/v1alpha1.ServerBootConfiguration","title":"ServerBootConfiguration","text":"<p>ServerBootConfiguration is the Schema for the serverbootconfigurations API</p> Field Description <code>metadata</code>  Kubernetes meta/v1.ObjectMeta   Refer to the Kubernetes API documentation for the fields of the <code>metadata</code> field.  <code>spec</code>  ServerBootConfigurationSpec  <code>serverRef</code>  Kubernetes core/v1.LocalObjectReference  <p>ServerRef is a reference to the server for which this boot configuration is intended.</p> <code>image</code>  string  <p>Image specifies the boot image to be used for the server. This field is optional and can be omitted if not specified.</p> <code>ignitionSecretRef</code>  Kubernetes core/v1.LocalObjectReference  <p>IgnitionSecretRef is a reference to the Kubernetes Secret object that contains the ignition configuration for the server. This field is optional and can be omitted if not specified.</p> <code>status</code>  ServerBootConfigurationStatus"},{"location":"api-reference/api/#metal.ironcore.dev/v1alpha1.ServerBootConfigurationSpec","title":"ServerBootConfigurationSpec","text":"<p> (Appears on:ServerBootConfiguration, ServerBootConfigurationTemplate) </p> <p>ServerBootConfigurationSpec defines the desired state of ServerBootConfiguration.</p> Field Description <code>serverRef</code>  Kubernetes core/v1.LocalObjectReference  <p>ServerRef is a reference to the server for which this boot configuration is intended.</p> <code>image</code>  string  <p>Image specifies the boot image to be used for the server. This field is optional and can be omitted if not specified.</p> <code>ignitionSecretRef</code>  Kubernetes core/v1.LocalObjectReference  <p>IgnitionSecretRef is a reference to the Kubernetes Secret object that contains the ignition configuration for the server. This field is optional and can be omitted if not specified.</p>"},{"location":"api-reference/api/#metal.ironcore.dev/v1alpha1.ServerBootConfigurationState","title":"ServerBootConfigurationState (<code>string</code> alias)","text":"<p> (Appears on:ServerBootConfigurationStatus) </p> <p>ServerBootConfigurationState defines the possible states of a ServerBootConfiguration.</p> Value Description <p>\"Error\"</p> <p>ServerBootConfigurationStateError indicates that there is an error with the boot configuration.</p> <p>\"Pending\"</p> <p>ServerBootConfigurationStatePending indicates that the boot configuration is pending and not yet ready.</p> <p>\"Ready\"</p> <p>ServerBootConfigurationStateReady indicates that the boot configuration is ready for use.</p>"},{"location":"api-reference/api/#metal.ironcore.dev/v1alpha1.ServerBootConfigurationStatus","title":"ServerBootConfigurationStatus","text":"<p> (Appears on:ServerBootConfiguration) </p> <p>ServerBootConfigurationStatus defines the observed state of ServerBootConfiguration.</p> Field Description <code>state</code>  ServerBootConfigurationState  <p>State represents the current state of the boot configuration.</p>"},{"location":"api-reference/api/#metal.ironcore.dev/v1alpha1.ServerBootConfigurationTemplate","title":"ServerBootConfigurationTemplate","text":"<p> (Appears on:ServerMaintenanceSpec) </p> <p>ServerBootConfigurationTemplate defines the parameters to be used for rendering a boot configuration.</p> Field Description <code>name</code>  string  <p>Name specifies the name of the boot configuration.</p> <code>spec</code>  ServerBootConfigurationSpec  <p>Parameters specifies the parameters to be used for rendering the boot configuration.</p> <code>serverRef</code>  Kubernetes core/v1.LocalObjectReference  <p>ServerRef is a reference to the server for which this boot configuration is intended.</p> <code>image</code>  string  <p>Image specifies the boot image to be used for the server. This field is optional and can be omitted if not specified.</p> <code>ignitionSecretRef</code>  Kubernetes core/v1.LocalObjectReference  <p>IgnitionSecretRef is a reference to the Kubernetes Secret object that contains the ignition configuration for the server. This field is optional and can be omitted if not specified.</p>"},{"location":"api-reference/api/#metal.ironcore.dev/v1alpha1.ServerClaim","title":"ServerClaim","text":"<p>ServerClaim is the Schema for the serverclaims API</p> Field Description <code>metadata</code>  Kubernetes meta/v1.ObjectMeta   Refer to the Kubernetes API documentation for the fields of the <code>metadata</code> field.  <code>spec</code>  ServerClaimSpec  <code>power</code>  Power  <p>Power specifies the desired power state of the server.</p> <code>serverRef</code>  Kubernetes core/v1.LocalObjectReference  <p>ServerRef is a reference to a specific server to be claimed. This field is optional and can be omitted if the server is to be selected using ServerSelector.</p> <code>serverSelector</code>  Kubernetes meta/v1.LabelSelector  <p>ServerSelector specifies a label selector to identify the server to be claimed. This field is optional and can be omitted if a specific server is referenced using ServerRef.</p> <code>ignitionSecretRef</code>  Kubernetes core/v1.LocalObjectReference  <p>IgnitionSecretRef is a reference to the Kubernetes Secret object that contains the ignition configuration for the server. This field is optional and can be omitted if not specified.</p> <code>image</code>  string  <p>Image specifies the boot image to be used for the server.</p> <code>status</code>  ServerClaimStatus"},{"location":"api-reference/api/#metal.ironcore.dev/v1alpha1.ServerClaimSpec","title":"ServerClaimSpec","text":"<p> (Appears on:ServerClaim) </p> <p>ServerClaimSpec defines the desired state of ServerClaim.</p> Field Description <code>power</code>  Power  <p>Power specifies the desired power state of the server.</p> <code>serverRef</code>  Kubernetes core/v1.LocalObjectReference  <p>ServerRef is a reference to a specific server to be claimed. This field is optional and can be omitted if the server is to be selected using ServerSelector.</p> <code>serverSelector</code>  Kubernetes meta/v1.LabelSelector  <p>ServerSelector specifies a label selector to identify the server to be claimed. This field is optional and can be omitted if a specific server is referenced using ServerRef.</p> <code>ignitionSecretRef</code>  Kubernetes core/v1.LocalObjectReference  <p>IgnitionSecretRef is a reference to the Kubernetes Secret object that contains the ignition configuration for the server. This field is optional and can be omitted if not specified.</p> <code>image</code>  string  <p>Image specifies the boot image to be used for the server.</p>"},{"location":"api-reference/api/#metal.ironcore.dev/v1alpha1.ServerClaimStatus","title":"ServerClaimStatus","text":"<p> (Appears on:ServerClaim) </p> <p>ServerClaimStatus defines the observed state of ServerClaim.</p> Field Description <code>phase</code>  Phase  <p>Phase represents the current phase of the server claim.</p>"},{"location":"api-reference/api/#metal.ironcore.dev/v1alpha1.ServerMaintenance","title":"ServerMaintenance","text":"<p>ServerMaintenance is the Schema for the ServerMaintenance API</p> Field Description <code>metadata</code>  Kubernetes meta/v1.ObjectMeta   Refer to the Kubernetes API documentation for the fields of the <code>metadata</code> field.  <code>spec</code>  ServerMaintenanceSpec  <code>policy</code>  ServerMaintenancePolicy  <p>Policy specifies the maintenance policy to be enforced on the server.</p> <code>serverRef</code>  Kubernetes core/v1.LocalObjectReference  <p>ServerRef is a reference to the server that is to be maintained.</p> <code>serverPower</code>  Power  <p>ServerPower specifies the power state of the server during maintenance.</p> <code>serverBootConfigurationTemplate</code>  ServerBootConfigurationTemplate  <p>ServerBootConfigurationTemplate specifies the boot configuration to be applied to the server during maintenance.</p> <code>status</code>  ServerMaintenanceStatus"},{"location":"api-reference/api/#metal.ironcore.dev/v1alpha1.ServerMaintenancePolicy","title":"ServerMaintenancePolicy (<code>string</code> alias)","text":"<p> (Appears on:BIOSSettingsSpec, BIOSVersionSpec, ServerMaintenanceSpec) </p> <p>ServerMaintenancePolicy specifies the maintenance policy to be enforced on the server.</p> Value Description <p>\"Enforced\"</p> <p>ServerMaintenancePolicyEnforced specifies that the maintenance policy is enforced.</p> <p>\"OwnerApproval\"</p> <p>ServerMaintenancePolicyOwnerApproval specifies that the maintenance policy requires owner approval.</p>"},{"location":"api-reference/api/#metal.ironcore.dev/v1alpha1.ServerMaintenanceSpec","title":"ServerMaintenanceSpec","text":"<p> (Appears on:ServerMaintenance) </p> <p>ServerMaintenanceSpec defines the desired state of a ServerMaintenance</p> Field Description <code>policy</code>  ServerMaintenancePolicy  <p>Policy specifies the maintenance policy to be enforced on the server.</p> <code>serverRef</code>  Kubernetes core/v1.LocalObjectReference  <p>ServerRef is a reference to the server that is to be maintained.</p> <code>serverPower</code>  Power  <p>ServerPower specifies the power state of the server during maintenance.</p> <code>serverBootConfigurationTemplate</code>  ServerBootConfigurationTemplate  <p>ServerBootConfigurationTemplate specifies the boot configuration to be applied to the server during maintenance.</p>"},{"location":"api-reference/api/#metal.ironcore.dev/v1alpha1.ServerMaintenanceState","title":"ServerMaintenanceState (<code>string</code> alias)","text":"<p> (Appears on:ServerMaintenanceStatus) </p> <p>ServerMaintenanceState specifies the current state of the server maintenance.</p> Value Description <p>\"Failed\"</p> <p>ServerMaintenanceStateCompleted specifies that the server maintenance has been completed.</p> <p>\"InMaintenance\"</p> <p>ServerMaintenanceStateInMaintenance specifies that the server is in maintenance.</p> <p>\"Pending\"</p> <p>ServerMaintenanceStatePending specifies that the server maintenance is pending.</p>"},{"location":"api-reference/api/#metal.ironcore.dev/v1alpha1.ServerMaintenanceStatus","title":"ServerMaintenanceStatus","text":"<p> (Appears on:ServerMaintenance) </p> <p>ServerMaintenanceStatus defines the observed state of a ServerMaintenance</p> Field Description <code>state</code>  ServerMaintenanceState  <p>State specifies the current state of the server maintenance.</p>"},{"location":"api-reference/api/#metal.ironcore.dev/v1alpha1.ServerPowerState","title":"ServerPowerState (<code>string</code> alias)","text":"<p> (Appears on:ServerStatus) </p> <p>ServerPowerState defines the possible power states for a server.</p> Value Description <p>\"Off\"</p> <p>ServerOffPowerState indicates that the system is powered off, although some components may continue to have auxiliary power such as the management controller.</p> <p>\"On\"</p> <p>ServerOnPowerState indicates that the system is powered on.</p> <p>\"Paused\"</p> <p>ServerPausedPowerState indicates that the system is paused.</p> <p>\"PoweringOff\"</p> <p>ServerPoweringOffPowerState indicates a temporary state between On and Off. The power off action can take time while the OS is in the shutdown process.</p> <p>\"PoweringOn\"</p> <p>ServerPoweringOnPowerState indicates a temporary state between Off and On. This temporary state can be very short.</p>"},{"location":"api-reference/api/#metal.ironcore.dev/v1alpha1.ServerSpec","title":"ServerSpec","text":"<p> (Appears on:Server) </p> <p>ServerSpec defines the desired state of a Server.</p> Field Description <code>uuid</code>  string  <p>UUID is the unique identifier for the server. Deprecated in favor of systemUUID.</p> <code>systemUUID</code>  string  <p>SystemUUID is the unique identifier for the server.</p> <code>power</code>  Power  <p>Power specifies the desired power state of the server.</p> <code>indicatorLED</code>  IndicatorLED  <p>IndicatorLED specifies the desired state of the server\u2019s indicator LED.</p> <code>serverClaimRef</code>  Kubernetes core/v1.ObjectReference  <p>ServerClaimRef is a reference to a ServerClaim object that claims this server. This field is optional and can be omitted if no claim is associated with this server.</p> <code>serverMaintenanceRef</code>  Kubernetes core/v1.ObjectReference  <p>ServerMaintenanceRef is a reference to a ServerMaintenance object that maintains this server.</p> <code>bmcRef</code>  Kubernetes core/v1.LocalObjectReference  <p>BMCRef is a reference to the BMC object associated with this server. This field is optional and can be omitted if no BMC is associated with this server.</p> <code>bmc</code>  BMCAccess  <p>BMC contains the access details for the BMC. This field is optional and can be omitted if no BMC access is specified.</p> <code>bootConfigurationRef</code>  Kubernetes core/v1.ObjectReference  <p>BootConfigurationRef is a reference to a BootConfiguration object that specifies the boot configuration for this server. This field is optional and can be omitted if no boot configuration is specified.</p> <code>maintenanceBootConfigurationRef</code>  Kubernetes core/v1.ObjectReference  <p>MaintenanceBootConfigurationRef is a reference to a BootConfiguration object that specifies the boot configuration for this server during maintenance. This field is optional and can be omitted</p> <code>bootOrder</code>  []BootOrder  <p>BootOrder specifies the boot order of the server.</p> <code>biosSettingsRef</code>  Kubernetes core/v1.LocalObjectReference  <p>BIOSSettingsRef is a reference to a biossettings object that specifies the BIOS configuration for this server.</p>"},{"location":"api-reference/api/#metal.ironcore.dev/v1alpha1.ServerState","title":"ServerState (<code>string</code> alias)","text":"<p> (Appears on:ServerStatus) </p> <p>ServerState defines the possible states of a server.</p> Value Description <p>\"Available\"</p> <p>ServerStateAvailable indicates that the server is available for use.</p> <p>\"Discovery\"</p> <p>ServerStateDiscovery indicates that the server is in its discovery state.</p> <p>\"Error\"</p> <p>ServerStateError indicates that there is an error with the server.</p> <p>\"Initial\"</p> <p>ServerStateInitial indicates that the server is in its initial state.</p> <p>\"Maintenance\"</p> <p>ServerStateMaintenance indicates that the server is in maintenance.</p> <p>\"Reserved\"</p> <p>ServerStateReserved indicates that the server is reserved for a specific use or user.</p>"},{"location":"api-reference/api/#metal.ironcore.dev/v1alpha1.ServerStatus","title":"ServerStatus","text":"<p> (Appears on:Server) </p> <p>ServerStatus defines the observed state of Server.</p> Field Description <code>manufacturer</code>  string  <p>Manufacturer is the name of the server manufacturer.</p> <code>model</code>  string  <p>Model is the model of the server.</p> <code>sku</code>  string  <p>SKU is the stock keeping unit identifier for the server.</p> <code>serialNumber</code>  string  <p>SerialNumber is the serial number of the server.</p> <code>powerState</code>  ServerPowerState  <p>PowerState represents the current power state of the server.</p> <code>indicatorLED</code>  IndicatorLED  <p>IndicatorLED specifies the current state of the server\u2019s indicator LED.</p> <code>state</code>  ServerState  <p>State represents the current state of the server.</p> <code>networkInterfaces</code>  []NetworkInterface  <p>NetworkInterfaces is a list of network interfaces associated with the server.</p> <code>totalSystemMemory</code>  k8s.io/apimachinery/pkg/api/resource.Quantity  <p>TotalSystemMemory is the total amount of memory in bytes available on the server.</p> <code>processors</code>  []Processor  <p>Processors is a list of Processors associated with the server.</p> <code>storages</code>  []Storage  <p>Storages is a list of storages associated with the server.</p> <code>conditions</code>  []Kubernetes meta/v1.Condition  (Optional) <p>Conditions represents the latest available observations of the server\u2019s current state.</p>"},{"location":"api-reference/api/#metal.ironcore.dev/v1alpha1.Storage","title":"Storage","text":"<p> (Appears on:ServerStatus) </p> <p>Storage defines the details of one storage device</p> Field Description <code>name</code>  string  <p>Name is the name of the storage interface.</p> <code>state</code>  StorageState  <p>State specifies the state of the storage device.</p> <code>volumes</code>  []StorageVolume  <p>Volumes is a collection of volumes associated with this storage.</p> <code>drives</code>  []StorageDrive  <p>Drives is a collection of drives associated with this storage.</p>"},{"location":"api-reference/api/#metal.ironcore.dev/v1alpha1.StorageDrive","title":"StorageDrive","text":"<p> (Appears on:Storage) </p> <p>StorageDrive defines the details of one storage drive</p> Field Description <code>name</code>  string  <p>Name is the name of the storage interface.</p> <code>mediaType</code>  string  <p>MediaType specifies the media type of the storage device.</p> <code>type</code>  string  <p>Type specifies the type of the storage device.</p> <code>capacity</code>  k8s.io/apimachinery/pkg/api/resource.Quantity  <p>Capacity specifies the size of the storage device in bytes.</p> <code>vendor</code>  string  <p>Vendor specifies the vendor of the storage device.</p> <code>model</code>  string  <p>Model specifies the model of the storage device.</p> <code>state</code>  StorageState  <p>State specifies the state of the storage device.</p>"},{"location":"api-reference/api/#metal.ironcore.dev/v1alpha1.StorageState","title":"StorageState (<code>string</code> alias)","text":"<p> (Appears on:Storage, StorageDrive, StorageVolume) </p> <p>StorageState represents Storage states</p> Value Description <p>\"Absent\"</p> <p>StorageStateAbsent indicates that the storage device is absent.</p> <p>\"Disabled\"</p> <p>StorageStateDisabled indicates that the storage device is disabled.</p> <p>\"Enabled\"</p> <p>StorageStateEnabled indicates that the storage device is enabled.</p>"},{"location":"api-reference/api/#metal.ironcore.dev/v1alpha1.StorageVolume","title":"StorageVolume","text":"<p> (Appears on:Storage) </p> <p>StorageVolume defines the details of one storage volume</p> Field Description <code>name</code>  string  <p>Name is the name of the storage interface.</p> <code>capacity</code>  k8s.io/apimachinery/pkg/api/resource.Quantity  <p>Capacity specifies the size of the storage device in bytes.</p> <code>state</code>  StorageState  <p>Status specifies the status of the volume.</p> <code>raidType</code>  string  <p>RAIDType specifies the RAID type of the associated Volume.</p> <code>volumeUsage</code>  string  <p>VolumeUsage specifies the volume usage type for the Volume.</p>"},{"location":"api-reference/api/#metal.ironcore.dev/v1alpha1.TaskStatus","title":"TaskStatus","text":"<p> (Appears on:BIOSVersionStatus) </p> Field Description <code>taskURI</code>  string  <code>taskState</code>  github.com/stmcginnis/gofish/redfish.TaskState  <code>taskStatus</code>  github.com/stmcginnis/gofish/common.Health  <code>percentageComplete</code>  int"},{"location":"api-reference/api/#metal.ironcore.dev/v1alpha1.UpdatePolicy","title":"UpdatePolicy (<code>string</code> alias)","text":"<p> (Appears on:BIOSVersionSpec) </p> Value Description <p>\"Force\"</p> <p> Generated with <code>gen-crd-api-reference-docs</code> </p>"},{"location":"concepts/biossettings/","title":"BIOSSettings","text":"<p><code>BIOSSettings</code> represents a BIOS Setting update operation for a physical server (compute system). It updates the bios settings on physical server's BIOS. </p>"},{"location":"concepts/biossettings/#key-points","title":"Key Points","text":"<ul> <li><code>BIOSSettings</code> maps a BIOS version and settings as map for a given server.</li> <li>Only one <code>BIOSSettings</code> can be active per <code>Server</code> at a time.</li> <li><code>BIOSSettings</code> related changes are applied once the bios version matches with the physical server's bios.</li> <li><code>BIOSSettings</code> handles reboots of server (if required) using <code>ServerMaintenance</code> resource </li> <li>Once<code>BIOSSettings</code> moves to <code>Failed</code> state, It stays in this state unless Manually moved out of this state. </li> </ul>"},{"location":"concepts/biossettings/#workflow","title":"Workflow","text":"<ol> <li>A separate operator (e.g., <code>biosSettingsSet</code>) or user creates a <code>BIOSSettings</code> resource referencing a     specific <code>Server</code>.</li> <li>Provided settings are checked against the current BIOS setting.</li> <li>If settings are same as on the server, the state is moved to <code>Applied</code> (even if the version does not match)</li> <li>If the settings needs update, <code>BIOSSettings</code> check the version of BIOS and if required version does not match, it waits for the bios version to reach the spec version.</li> <li><code>BIOSSettings</code> checks if the required setting update needs physical server reboot. </li> <li>If reboot is needed and <code>ServerMaintenance</code> is not provided already. it requests for one and waits for the <code>server</code> to enter <code>Maintenance</code> state.<ul> <li><code>policy</code> used by <code>ServerMaintenance</code> is to be provided through Spec <code>ServerMaintenancePolicyType</code> in <code>BIOSSettings</code></li> </ul> </li> <li>Setting update process is started and the server is rebooted if required. </li> <li><code>BIOSSettings</code> verfiy the setting has been applied and trasistions the state to <code>Applied</code>. removes the <code>ServerMaintenance</code> resource if created by self.</li> <li>Any further update to the <code>BIOSSettings</code> Spec will restart the process. </li> <li>If the <code>BIOSSettings</code> fails to apply the bios setting. The <code>BIOSSettings</code> moves to <code>Failed</code> state until Manually moved out of this state. </li> </ol>"},{"location":"concepts/biossettings/#example","title":"Example","text":"<pre><code>apiVersion: metal.ironcore.dev/v1alpha1\nkind: BIOSSettings\nmetadata:\n  name: biossettings-sample\nspec:\n  serverRef:\n    name: endpoint-sample-system-0\n  version: 2.10.3\n  settings:\n    PxeDev1EnDis: Disable\n    PxeDev2EnDis: Enabled\n    OtherSettings: \"123\"\n    someother: Disabled\nServerMaintenancePolicy: OwnerApproval\n</code></pre>"},{"location":"concepts/biosversion/","title":"BIOSVersion","text":"<p><code>BIOSVersion</code> represents a BIOS Version upgrade operation for a physical server (compute system). It updates the bios Version on physical server's BIOS. </p>"},{"location":"concepts/biosversion/#key-points","title":"Key Points","text":"<ul> <li><code>BIOSVersion</code> maps a BIOS version required for a given server's BIOS.<ul> <li><code>BIOSVersion</code> Spec contains the required details to upgrade the BIOS to required version.</li> </ul> </li> <li>Only one <code>BIOSVersion</code> can be active per <code>Server</code> at a time. </li> <li><code>BIOSVersion</code> starts the version upgrade of the BIOS using redfish <code>SimpleUpgrade</code> API.</li> <li><code>BIOSVersion</code> handles reboots of server using <code>ServerMaintenance</code> resource.</li> <li>Once<code>BIOSVersion</code> moves to <code>Failed</code> state, It stays in this state unless Manually moved out of this state. </li> </ul>"},{"location":"concepts/biosversion/#workflow","title":"Workflow","text":"<ol> <li>A separate operator (e.g., <code>biosVersionSet</code>) or user creates a <code>BIOSVersion</code> resource referencing a     specific <code>Server</code>.</li> <li>Provided BIOS Version is checked against the current BIOS version.</li> <li>If version is same as on the server's BIOS, the state is moved to <code>Completed</code>.</li> <li>If <code>ServerMaintenance</code> is not provided already. it requests for one and waits for the <code>server</code> to enter <code>Maintenance</code> state.<ul> <li><code>policy</code> used by <code>ServerMaintenance</code> is to be provided through Spec <code>ServerMaintenancePolicy</code> in <code>BIOSVersion</code></li> </ul> </li> <li><code>BIOSVersion</code> issues the bios upgrade using redfish <code>SimpleUpgrade</code> API. and monitors the <code>upgrade task</code> created by the API.</li> <li>the <code>BIOSVersion</code> moves to <code>Failed</code> state:<ul> <li>If <code>SimpleUpgade</code> is issued but unable to get the task to monitor the progress of bios upgrade</li> <li>If the <code>upgrade task</code> created by SimpleUpgade fails and does not reach completed state.</li> <li>If the bios version requested is lower than that of the current bios version</li> </ul> </li> <li><code>BIOSVersion</code> moves to reboot the server once the <code>upgrade task</code> has been completed. </li> <li><code>BIOSVersion</code> verfiy the bios version post reboot, removes the <code>ServerMaintenance</code> resource if created by self. and transistion to <code>Completed</code> state</li> <li>Any further update to the <code>BIOSVersion</code> Spec will restart the process. </li> </ol>"},{"location":"concepts/biosversion/#example","title":"Example","text":"<pre><code>apiVersion: metal.ironcore.dev/v1alpha1\nkind: BIOSVersion\nmetadata:\n  name: biosversion-sample\nspec:\n  version: \"U59 v2.34 (10/04/2024)\"\n  image:\n    URI: \"https://foo-2.34_10_04_2024.signed.flash\"\n    transferProtocol: \"HTTPS\"\n  updatePolicy: Normal\n  serverRef:\n    name: endpoint-sample-hpe-system-0\n  serverMaintenancePolicy: OwnerApproval\n</code></pre>"},{"location":"concepts/bmcs/","title":"BMCs","text":"<p>The BMC Custom Resource Definition (CRD) represents a Baseboard Management Controller.  It is designed to manage and monitor the state of BMC devices and the systems (servers) they control. The primary  purpose of the BMC resource is to reconcile the BMC state and detect all systems it manages by creating the  corresponding <code>Server</code> resources.</p>"},{"location":"concepts/bmcs/#example-bmc-resource","title":"Example BMC Resource","text":"<p>Using <code>endpointRef</code>:</p> <pre><code>apiVersion: metal.ironcore.dev/v1alpha1\nkind: BMC\nmetadata:\n  name: my-bmc\nspec:\n  endpointRef:\n    name: my-bmc-endpoint\n  bmcSecretRef:\n    name: my-bmc-secret\n  protocol:\n    name: Redfish\n    port: 8000\n    scheme: http\n  consoleProtocol:\n    name: SSH\n    port: 22\n</code></pre> <p>Using inline <code>endpoint</code>:</p> <pre><code>apiVersion: metal.ironcore.dev/v1alpha1\nkind: BMC\nmetadata:\n  name: my-bmc-inline\nspec:\n  access:\n    macAddress: \"00:1A:2B:3C:4D:5E\"\n    ip: \"192.168.100.10\"\n  bmcSecretRef:\n    name: my-bmc-secret\n  protocol:\n    name: Redfish\n    port: 8000\n  consoleProtocol:\n    name: SSH\n    port: 22\n</code></pre>"},{"location":"concepts/bmcs/#usage","title":"Usage","text":"<p>The BMC CRD is essential for managing and monitoring BMC devices. It is used to:</p> <ul> <li>Reconcile BMC State: Continuously monitor the BMC's status and update its state.</li> <li>Detect Managed Systems: Identify all systems (servers) managed by the BMC and create corresponding <code>Server</code> resources.</li> <li>Automate Hardware Management: Enable automated power control, firmware updates, and health monitoring of physical servers through the BMC.</li> </ul>"},{"location":"concepts/bmcs/#reconciliation-process","title":"Reconciliation Process","text":"<p>The <code>BMCReconciler</code> is a controller that processes BMC resources to:</p> <ol> <li> <p>Access BMC Device: Uses the <code>endpointRef</code> or <code>endpoint</code>, along with <code>bmcSecretRef</code>, to establish a connection  with the BMC using the specified <code>protocol</code>.</p> </li> <li> <p>Retrieve BMC Information: Gathers details such as manufacturer, model, serial number, firmware version, and  power state.</p> </li> <li> <p>Update BMCStatus: Populates the <code>status</code> field of the BMC resource with the retrieved information.</p> </li> <li> <p>Detect Managed Systems: Identifies all systems (servers) that the BMC manages.</p> </li> <li> <p>Create Server Resources: For each detected system, the <code>BMCReconciler</code> creates a corresponding <code>Server</code> resource to represent the physical server.</p> </li> </ol>"},{"location":"concepts/bmcsecrets/","title":"BMCSecrets","text":"<p>The <code>BMCSecret</code> Custom Resource Definition (CRD) is a Kubernetes resource used to store sensitive credentials required  to access a Baseboard Management Controller (BMC). This resource holds the <code>username</code> and <code>password</code> needed for  authentication with the BMC devices. The <code>BMCSecret</code> is utilized by the <code>BMCReconciler</code> to construct clients that  interact with BMCs.</p>"},{"location":"concepts/bmcsecrets/#example-bmcsecret-resource","title":"Example BMCSecret Resource","text":"<p>An example of how to define an <code>BMCSecret</code> resource:</p> <pre><code>apiVersion: v1alpha1\nkind: BMCSecret\nmetadata:\n  name: my-bmc-secret\nstringData:\n  username: admin\n  password: supersecretpassword\ntype: Opaque\n</code></pre>"},{"location":"concepts/bmcsecrets/#usage","title":"Usage","text":"<p>The <code>BMCSecret</code> resource is essential for securely managing credentials required to access BMC devices. It is used by  the <code>BMCReconciler</code> to:</p> <ul> <li>Construct BMC Clients: Utilize the credentials to authenticate and establish connections with BMC devices.</li> <li>Automate Hardware Management: Enable automated operations such as power control, firmware updates, and  health monitoring by authenticating with the BMC.</li> </ul>"},{"location":"concepts/bmcsecrets/#credential-sources","title":"Credential Sources","text":"<ul> <li>Endpoint-Based Discovery: When BMCs are discovered through an <code>Endpoint</code> resource and a MAC Prefix Database,  the credentials (<code>username</code> and <code>password</code>) are derived automatically based on the MAC address prefixes.</li> <li>Manual Configuration: Users can manually create BMCSecret resources with the required credentials to interact with specific BMCs.</li> </ul>"},{"location":"concepts/bmcsecrets/#reconciliation-process","title":"Reconciliation Process","text":"<p>The <code>BMCReconciler</code> uses the <code>bmcSecretRef</code> field in the BMC resource's specification to reference the corresponding <code>BMCSecret</code>. It retrieves the credentials from the BMCSecret to authenticate with the BMC device.</p>"},{"location":"concepts/bmcsettings/","title":"BMCSettings","text":"<p><code>BMCSettings</code> represents a BMC Setting update operation for a physical server's BMC (compute system). It updates the BMC settings on physical server's BMC. </p>"},{"location":"concepts/bmcsettings/#key-points","title":"Key Points","text":"<ul> <li><code>BMCSettings</code> maps a BMC version and settings as map for a given server.</li> <li>Only one <code>BMCSettings</code> can be active per <code>BMC</code> at a time. </li> <li><code>BMCSettings</code> related changes are applied once the BMC version matches with the physical server's BMC version.</li> <li><code>BMCSettings</code> handles reboots of BMC</li> <li><code>BMCSettings</code> requests for <code>Maintenance</code> if <code>ServerMaintenancePolicy</code> is set to \"OwnerApproval\".</li> <li>Once<code>BMCSettings</code> moves to <code>Failed</code> state, It stays in this state unless Manually moved out of this state. </li> </ul>"},{"location":"concepts/bmcsettings/#workflow","title":"Workflow","text":"<ol> <li>A separate operator (e.g., <code>bmcSettingsSet</code>) or user creates a <code>BMCSettings</code> resource referencing a specific <code>BMC</code> </li> <li>Provided settings are checked against the current BMC setting.</li> <li>If settings are same as on the server, the state is moved to <code>Applied</code> (even if the version does not match)</li> <li>If the settings needs update, <code>BMCSettings</code> check the version of BMC and if required version does not match, it waits for the BMC version to reach the spec version.</li> <li>If \"OwnerApproval\" <code>ServerMaintenancePolicy</code> type is requested and <code>ServerMaintenance</code> is not provided already. it requests one per <code>server</code> managed by <code>BMC</code> and waits for all the <code>server</code> to enter <code>Maintenance</code> state.</li> <li>Setting update process is started and the physical server's BMC is rebooted if required. </li> <li><code>BMCSettings</code> verfiy the setting has been applied and trasistions the state to <code>Applied</code>. removes all the <code>ServerMaintenance</code> resource if created by self.</li> <li>Any further update to the <code>BMCSettings</code> Spec will restart the process. </li> <li>If the <code>BMCSettings</code> fails to apply the bmc setting. The <code>BMCSettings</code> moves to <code>Failed</code> state until Manually moved out of this state. </li> </ol>"},{"location":"concepts/bmcsettings/#example","title":"Example","text":"<pre><code>apiVersion: metal.ironcore.dev/v1alpha1\nkind: BMCSettings\nmetadata:\n  name: bmcsettings-sample\nspec:\n  BMCRef:\n    name: sample-BMC\n  version: 2.10.3\n  settings:\n    OtherSettings: \"123\"\n    someother: Disabled\n  ServerMaintenancePolicy: OwnerApproval\n</code></pre>"},{"location":"concepts/bmcversion/","title":"BMCVersion","text":"<p><code>BMCVersion</code> represents a BMC Version upgrade operation for a physical server's Manager. It updates the BMC Version on physical server's BMC. </p>"},{"location":"concepts/bmcversion/#key-points","title":"Key Points","text":"<ul> <li><code>BMCVersion</code> maps a BMC version required for a given server's BMC.<ul> <li><code>BMCVersion</code> Spec contains the required details to upgrade the BMC to required version.</li> </ul> </li> <li>Only one <code>BMCVersion</code> can be active per <code>BMC</code> at a time. </li> <li><code>BMCVersion</code> starts the version upgrade of the BMC using redfish <code>SimpleUpgrade</code> API.</li> <li><code>BMCVersion</code> handles reboots of BMC.</li> <li><code>BMCVersion</code> requests for <code>Maintenance</code> if <code>ServerMaintenancePolicy</code> is set to \"OwnerApproval\".</li> <li>Once<code>BMCVersion</code> moves to <code>Failed</code> state, It stays in this state unless Manually moved out of this state. </li> </ul>"},{"location":"concepts/bmcversion/#workflow","title":"Workflow","text":"<ol> <li>A separate operator (e.g., <code>bmcVersionSet</code>) or user creates a <code>BMCVersion</code> resource referencing a specific <code>BMC</code>.</li> <li>Provided settings are checked against the current BMC version.</li> <li>If version is same as on the server's BMC, the state is moved to <code>Completed</code>.</li> <li>If the version needs upgrade, <code>BMCVersion</code> checks the current version of BMC and if required version is lower than the requested, <code>BMCVersion</code> moves the state to <code>Failed</code></li> <li>If \"OwnerApproval\" <code>ServerMaintenancePolicy</code> type is requested and <code>ServerMaintenance</code> is not provided already. It requests one per <code>server</code> managed by <code>BMC</code> and waits for all the <code>server</code> to enter <code>Maintenance</code> state.</li> <li><code>BMCVersion</code> issues the BMC upgrade using redfish \"SimpleUpgrade\" API. and monitors the <code>upgrade task</code> created by the API.</li> <li><code>BMCVersion</code> moves to <code>Failed</code> state:<ul> <li>If <code>SimpleUpgade</code> is issued but unable to get the task to monitor the progress of BMC upgrade</li> <li>If the <code>upgrade task</code> created by SimpleUpgade fails and does not reach completed state.</li> <li>If the BMC version requested is lower than that of the current BMC version</li> </ul> </li> <li><code>BMCVersion</code> moves to reboot the BMC once the <code>upgrade task</code> has been completed. </li> <li><code>BMCVersion</code> verfiy the BMC version post reboot, removes the <code>ServerMaintenance</code> resource if created by self. and transistion to <code>Completed</code> state</li> <li>Any further update to the <code>BMCVersion</code> Spec will restart the process. </li> </ol>"},{"location":"concepts/bmcversion/#example","title":"Example","text":"<pre><code>apiVersion: metal.ironcore.dev/v1alpha1\nkind: BMCVersion\nmetadata:\n  name: biosversion-sample\nspec:\n  version: 2.10.3\n  image:\n    URI: \"http://foo.com/dell-idrac-bmc-2.10.3.bin\"\n    transferProtocol: \"http\"\n    imageSecretRef:\n      name: sample-secret\n  forceUpdate: false\n  BMCRef:\n    name: BMC-sample\n  serverMaintenancePolicy: Enforced\n</code></pre>"},{"location":"concepts/endpoints/","title":"Endpoints","text":"<p>The Endpoint Custom Resource Definition (CRD) is a Kubernetes resource used to represent and identify devices or  entities within an out-of-band (OOB) network. It serves as a means to catalog and manage devices such as Baseboard  Management Controllers (BMCs) by capturing their unique identifiers, specifically the MAC address and IP address.  The <code>EndpointReconciler</code> leverages this information to determine the nature of the device, its vendor, and any initial  credentials required for further interactions.</p>"},{"location":"concepts/endpoints/#example-endpoint-resource","title":"Example Endpoint Resource","text":"<p>An example of how to define an Endpoint resource:</p> <pre><code>apiVersion: metal.ironcore.dev/v1alpha1\nkind: Endpoint\nmetadata:\n  name: device-12345\nspec:\n  macAddress: \"00:1A:2B:3C:4D:5E\"\n  ip: \"192.168.100.10\"\n</code></pre>"},{"location":"concepts/endpoints/#mac-prefix-database-and-endpointreconciler-configuration","title":"MAC Prefix Database and EndpointReconciler Configuration","text":"<p>The <code>EndpointReconciler</code> can be configured with a MAC Prefix Database to determine the characteristics of devices based on their MAC addresses. This database maps MAC address prefixes to device information such as the manufacturer,  protocol, port, type, default credentials, and console settings.</p>"},{"location":"concepts/endpoints/#configuration","title":"Configuration","text":"<p>The MAC Prefix Database is typically configured using a YAML file, which is passed to the <code>metal-operator</code> using the  <code>--mac-prefixes-file</code> flag. This file contains mappings of MAC address prefixes to device specifications.</p> <p>Example YAML Configuration:</p> <pre><code>macPrefixes:\n  - macPrefix: \"23\"\n    manufacturer: \"Foo\"\n    protocol: \"Redfish\"\n    port: 8000\n    type: \"bmc\"\n    defaultCredentials:\n      - username: \"foo\"\n        password: \"bar\"\n    console:\n      type: \"ssh\"\n      port: 22\n</code></pre> <p>Key Fields:</p> <ul> <li>macPrefix (<code>string</code>): The prefix of the MAC address used to identify the device manufacturer or type.</li> <li>manufacturer (<code>string</code>): The name of the device manufacturer.</li> <li>protocol (<code>string</code>): The communication protocol used (e.g., <code>Redfish</code>).</li> <li>port (<code>int</code>): The network port used for communication.</li> <li>type (<code>string</code>): The type of device (e.g., <code>bmc</code>).</li> <li>defaultCredentials (<code>list</code>): A list of default credentials for accessing the device.<ul> <li>username (<code>string</code>): The default username.</li> <li>password (<code>string</code>): The default password.</li> </ul> </li> <li>console (<code>dict</code>): Console access configuration.<ul> <li>type (string): The console protocol (e.g., ssh).</li> <li>port (int): The port used for console access.</li> </ul> </li> </ul>"},{"location":"concepts/endpoints/#using-mac-prefixes-file-flag","title":"Using <code>--mac-prefixes-file</code> Flag","text":"<p>The <code>metal-operator</code> accepts the <code>--mac-prefixes-file</code> flag to specify the path to the MAC Prefix Database YAML file:</p> <pre><code>metal-operator --mac-prefixes-file /path/to/mac_prefixes.yaml\n</code></pre>"},{"location":"concepts/endpoints/#reconciliation-process","title":"Reconciliation Process","text":"<ol> <li> <p>MAC Address Matching: When the <code>EndpointReconciler</code> processes an <code>Endpoint</code> resource, it extracts the <code>macAddress</code> from the <code>spec</code>.</p> </li> <li> <p>Prefix Lookup: It compares the MAC address prefix against the entries in the MAC Prefix Database.</p> </li> <li> <p>Device Identification: If a matching prefix is found, the device is identified with the associated manufacturer,  type, and protocol.</p> </li> <li> <p>Credential Assignment: The default credentials specified in the database are used for initial authentication with  the device.</p> </li> <li> <p>BMC and BMCSecret Creation: When the <code>EndpointReconciler</code> detects that the device is a Baseboard Management Controller (<code>type: \"bmc\"</code>), it automatically creates a <code>BMC</code> and a <code>BMCSecret</code> object using the data from the MAC Prefix Database. These objects are used to manage and authenticate with the BMC device.</p> </li> <li> <p>Configuration Application: Additional settings such as console access and communication ports are applied based  on the database entries.</p> </li> </ol>"},{"location":"concepts/serverbootconfigurations/","title":"ServerBootConfigurations","text":"<p>The <code>ServerBootConfiguration</code> Custom Resource Definition (CRD) is a Kubernetes resource used to signal the need to  initiate a boot process for a bare metal server. It serves as an indicator for external components responsible for  configuring network boot environments, such as PXE or HTTPBoot servers. The <code>ServerBootConfiguration</code> resource allows  the <code>metal-operator</code> to delegate the boot preparation process to third-party operators like the  <code>boot-operator</code> or tools like OpenStack Ironic.</p>"},{"location":"concepts/serverbootconfigurations/#example-serverbootconfiguration-resource","title":"Example ServerBootConfiguration Resource","text":"<pre><code>apiVersion: metal.ironcore.dev/v1alpha1\nkind: ServerBootConfiguration\nmetadata:\n  name: my-server-boot-config\n  namespace: defauilt\nspec:\n  serverRef:\n    name: my-server\n  image: my-osimage:latest\n  ignitionSecretRef:\n    name: my-ignition-secret\n</code></pre>"},{"location":"concepts/serverbootconfigurations/#integration-with-third-party-components","title":"Integration with Third-Party Components","text":"<p>The actual preparation of the boot environment is performed by external components, which may include: - boot-operator: A custom operator that handles boot environment preparation as part of the IronCore project. - OpenStack Ironic: A service for managing and provisioning bare metal servers.</p> <p>These components watch for <code>ServerBootConfiguration</code> resources and perform the necessary actions to set up the boot  environment according to the specifications provided.</p>"},{"location":"concepts/serverbootconfigurations/#why-externalizing-the-boot-preparation-to-a-third-party","title":"Why externalizing the boot preparation to a Third-Party?","text":"<p>Separation of Concerns: By abstracting the boot preparation into a separate resource, the <code>metal-operator</code>  remains agnostic to the specifics of the boot process, allowing for flexibility in different deployment scenarios.</p> <p>Custom Implementations: Users can implement their own components to handle the <code>ServerBootConfiguration</code>, enabling  integration with various provisioning systems or custom workflows.</p>"},{"location":"concepts/serverbootconfigurations/#reconciliation-process","title":"Reconciliation Process","text":"<p>The <code>ServerReconciler</code> checks the <code>ServerBootConfiguration</code> status before powering on the server. Servers are not  powered on until the boot environment is confirmed to be <code>ready</code>.</p>"},{"location":"concepts/serverclaims/","title":"ServerClaims","text":"<p>The <code>ServerClaim</code> Custom Resource Definition (CRD) is a Kubernetes resource used to claim ownership of a bare metal  <code>Server</code> resource that is in the <code>Available</code> state. It allows users to specify the desired  operating system image and ignition configuration for booting the server. The <code>ServerClaimReconciler</code> handles the  allocation of servers to claims and manages the lifecycle of the claim and the server.</p>"},{"location":"concepts/serverclaims/#example-serverclaim-resource","title":"Example ServerClaim Resource","text":"<p>Claiming a Specific Server with Ignition Configuration:</p> <pre><code>apiVersion: metal.ironcore.dev/v1alpha1\nkind: ServerClaim\nmetadata:\n  name: my-server-claim\n  namespace: default\nspec:\n  power: \"On\"\n  serverRef:\n    name: \"my-server\"\n  image: \"my-osimage:latest\"\n  ignitionSecretRef:\n    name: \"my-ignition-secret\"\n</code></pre> <p>Claiming a Server Using a Selector:</p> <pre><code>apiVersion: metal.ironcore.dev/v1alpha1\nkind: ServerClaim\nmetadata:\n  name: selector-server-claim\n  namespace: default\nspec:\n  power: \"On\"\n  serverSelector:\n    matchLabels:\n      hardwareType: gpu-node\n      location: datacenter-1\n  image: my-osimage:latest\n  ignitionSecretRef:\n    name: my-ignition-secret\n</code></pre>"},{"location":"concepts/serverclaims/#reconciliation-process","title":"Reconciliation Process","text":"<ul> <li> <p><code>ServerBootConfiguration</code>:</p> <ul> <li>The <code>ServerClaimReconciler</code> creates a <code>ServerBootConfiguration</code> resource under the hood.</li> <li>This resource specifies how the server should be booted, including the image and ignition configuration.</li> </ul> </li> <li> <p>State Transitions:</p> <ul> <li>Available \u2192 Reserved: When a server is successfully claimed.</li> <li>Reserved \u2192 Cleanup: When the <code>ServerClaim</code> is deleted.</li> <li>Cleanup \u2192 Available: After cleanup tasks are completed.</li> </ul> </li> <li> <p>Cleanup Process:</p> <ul> <li>Ensures that servers are sanitized before being made available again.</li> <li>Tasks may include wiping disks, resetting BIOS settings, and clearing configurations.</li> </ul> </li> </ul>"},{"location":"concepts/servermaintenance/","title":"ServerMaintenance","text":"<p><code>ServerMaintenance</code> represents a maintenance operation for a physical server. It transitions a <code>Server</code> from its  current operational state (e.g., Available/Reserved) into a Maintenance state. Each <code>ServerMaintenance</code> object tracks the lifecycle of a maintenance task, ensuring servers are properly taken offline, updated, and restored.</p>"},{"location":"concepts/servermaintenance/#key-points","title":"Key Points","text":"<ul> <li><code>ServerMaintenance</code> is namespaced and may represent various maintenance operations.</li> <li>Only one <code>ServerMaintenance</code> can be active per <code>Server</code> at a time. Others remain pending.</li> <li>When the active <code>ServerMaintenance</code> completes, the next pending one (if any) starts.</li> <li>If no more maintenance tasks are pending, the <code>Server</code> returns to its previous operational state.</li> <li><code>policy</code> determines how maintenance starts:<ul> <li>OwnerApproval: Requires a label (e.g., <code>ok-to-maintenance: \"true\"</code>) on the <code>ServerClaim</code>.</li> <li>Enforced: Does not require owner approval.</li> </ul> </li> </ul>"},{"location":"concepts/servermaintenance/#workflow","title":"Workflow","text":"<ol> <li>A separate operator (e.g., <code>foo-maintenance-operator</code>) or user creates a <code>ServerMaintenance</code> resource referencing a     specific <code>Server</code>.</li> <li>If a <code>Server</code> is claimed, a label <code>metal.ironcore.dev/maintanence-needed: \"true\"</code> is added to the <code>ServerClaim</code>.</li> <li>If <code>policy</code> is <code>OwnerApproval</code> and no <code>ok-to-maintenance</code> label is set on the <code>ServerClaim</code>, the <code>ServerMaintenance</code>    stays in <code>Pending</code>. The <code>Server</code> also remains unchanged.</li> <li>If <code>policy</code> is <code>OwnerApproval</code> and the <code>ok-to-maintenance</code> label is present (or if <code>alwaysPerformMaintenance</code> is     enabled), or if the policy is <code>Enforced</code>, the <code>metal-operator</code> transitions the <code>Server</code> into <code>Maintenance</code> and     updates the <code>ServerMaintenance</code> state accordingly.</li> <li>The <code>ServerMaintenanceReconciler</code> creates a <code>ServerBootConfiguration</code> out of the <code>ServerMaintenance</code>'s     <code>ServerBootConfigurationTemplate</code> and applies it to the <code>Server</code>. The power state of the <code>Server</code> can set by providing the    <code>ServerPower</code> field in the <code>ServerMaintenance</code> object. Once the maintenance task is complete, the maintenance operator    sets the <code>ServerMaintenance</code> state to <code>Completed</code>.</li> <li>(optional) In case no <code>ServerBootConfigurationTemplate</code> is provided, the maintenance operator powers off the <code>Server</code>,     applies a <code>ServerBootConfiguration</code> (if needed), performs the maintenance, and sets <code>ServerMaintenance</code> to <code>Completed</code>.</li> <li>The <code>metal-operator</code> transitions the <code>Server</code> back to its prior state. If additional <code>ServerMaintenance</code> objects are    pending, the next one is processed.</li> </ol>"},{"location":"concepts/servermaintenance/#example","title":"Example","text":"<pre><code>apiVersion: metal.ironcore.dev/v1alpha1\nkind: ServerMaintenance\nmetadata:\n  name: bios-update\n  namespace: ops\n  annotations:\n    metal.ironcore.dev/reason: \"BIOS update\"\nspec:\n  policy: OwnerApproval\n  serverRef:\n    name: server-foo\n  serverPower: On # or Off\n  serverBootConfigurationTemplate:\n    name: bios-update-config\n    spec:\n      image: \"bios-update-image\"\n      serverRef:\n        name: server-foo\n      ignitionSecretRef:\n        name: bios-update-ignition\nstatus:\n  state: Pending\n</code></pre> <p>If <code>policy: OwnerApproval</code> and no <code>ok-to-maintenance</code> label exists on the <code>ServerClaim</code>, this <code>ServerMaintenance</code>  remains <code>Pending</code>, and the <code>Server</code> stays as is. Once the label is added (or if the operator setting  <code>alwaysPerformMaintenance</code> is enabled), the <code>metal-operator</code> transitions the <code>Server</code> to <code>Maintenance</code>, and the  maintenance operator performs the maintenance task.</p>"},{"location":"concepts/servers/","title":"Servers","text":"<p>The <code>Server</code> Custom Resource Definition (CRD) represents a bare metal server. It manages the state and lifecycle of  physical servers, enabling automated hardware management tasks such as power control, BIOS configuration, and  firmware updates. Interaction with a <code>Server</code> resource is facilitated through its associated Baseboard Management  Controller (BMC), either by referencing a <code>BMC</code> resource or by providing direct BMC configuration.</p>"},{"location":"concepts/servers/#example-server-resource","title":"Example Server Resource","text":"<pre><code>apiVersion: metal.ironcore.dev/v1alpha1\nkind: Server\nmetadata:\n  name: my-server\nspec:\n  uuid: \"123e4567-e89b-12d3-a456-426614174000\"\n  power: \"Off\"\n  bmcRef:\n    name: my-bmc\n  bootOrder:\n    - name: PXE\n      priority: 1\n      device: Network\n  BIOS:\n    - version: \"1.0.3\"\n      settings:\n        BootMode: UEFI\n        Virtualization: Enabled\n</code></pre>"},{"location":"concepts/servers/#usage","title":"Usage","text":"<p>The <code>Server</code> CRD is central to managing bare metal servers. It allows for:</p> <ul> <li>Power Management: Powering servers on and off.</li> <li>BIOS Configuration: Changing BIOS settings and performing BIOS updates.</li> <li>Lifecycle Management: Handling the server's lifecycle through various states.</li> <li>Hardware Discovery: Gathering hardware information via BMC and in-band agents.</li> </ul>"},{"location":"concepts/servers/#lifecycle-and-states","title":"Lifecycle and States","text":"<p>A server undergoes the following phases:</p> <ol> <li> <p>Initial: The server object is created; hardware details are not yet known.</p> </li> <li> <p>Discovery:</p> <ul> <li>The <code>ServerReconciler</code> interacts with the BMC to retrieve hardware details.</li> <li>An initial boot is performed using a predefined ignition configuration.</li> <li>An agent called <code>metalprobe</code> runs on the server to collect additional data (e.g., network interfaces, disks).</li> <li>The collected data is reported back to the <code>metal-operator</code> and added to the <code>ServerStatus</code>.`</li> </ul> </li> <li> <p>Available: The server has completed discovery and is ready for use.</p> </li> <li> <p>Reserved:</p> <ul> <li>A <code>ServerClaim</code> resource is created to claim the server.</li> <li>The server transitions to the <code>Reserved</code> state.</li> <li>The server is allocated for a specific use or user.</li> </ul> </li> <li> <p>Cleanup:</p> <ul> <li>When the <code>ServerClaim</code> is removed, the server enters the Cleanup state.</li> <li>Sanitization processes are performed (e.g., wiping disks, resetting BIOS settings).</li> </ul> </li> <li> <p>Maintenance:</p> <ul> <li>Servers in the <code>Available</code> state can transition to <code>Maintenance</code>.</li> <li>Maintenance tasks such as BIOS updates or hardware repairs are performed.</li> </ul> </li> <li> <p>Error:</p> <ul> <li>The server has encountered an error.</li> <li>Requires intervention to resolve issues before it can return to <code>Available</code>.</li> </ul> </li> </ol> <p>The state diagram below represents the various server states and their transitions:</p> <pre><code>stateDiagram-v2\n    [*] --&gt; Initial\n    Initial --&gt; Discovery : Server object created\n    Discovery --&gt; Available : Discovery complete\n    Available --&gt; Reserved : ServerClaim created\n    Reserved --&gt; Cleanup : ServerClaim removed\n    Cleanup --&gt; Available : Cleanup complete\n    Available --&gt; Maintenance : Maintenance initiated\n    Maintenance --&gt; Available : Maintenance complete\n    Available --&gt; Error : Error detected\n    Reserved --&gt; Error : Error detected\n    Discovery --&gt; Error : Error detected\n    Cleanup --&gt; Error : Error detected\n    Maintenance --&gt; Error : Error detected\n    Error --&gt; Maintenance : Enter maintenance to fix error\n    Error --&gt; Available : Error resolved</code></pre>"},{"location":"concepts/servers/#interaction-with-bmc","title":"Interaction with BMC","text":"<p>Interaction with a server is done through its BMC:</p> <p>Via Reference: Reference a <code>BMC</code> resource using <code>bmcRef</code>.</p> <pre><code>apiVersion: metal.ironcore.dev/v1alpha1\nkind: Server\nmetadata:\n  name: server-with-bmc-ref\nspec:\n  uuid: \"123e4567-e89b-12d3-a456-426614174000\"\n  power: \"On\"\n  bmcRef:\n    name: my-bmc\n  bootOrder:\n    - name: PXE\n      priority: 1\n      device: Network\n  BIOS:\n    - version: \"1.0.3\"\n      settings:\n        BootMode: UEFI\n        HyperThreading: Enabled\n</code></pre> <p>Inline Configuration: Use the <code>bmc</code> field to provide direct BMC access details.</p> <pre><code>apiVersion: v1alpha1\nkind: BMC\nmetadata:\n  name: my-bmc\nspec:\n  endpointRef:\n    name: my-bmc-endpoint\n  bmcSecretRef:\n    name: my-bmc-secret\n  protocol:\n    name: Redfish\n    port: 8000\n  consoleProtocol:\n    name: SSH\n    port: 22\n</code></pre>"},{"location":"development/dev_docs/","title":"metal-operator documentation","text":""},{"location":"development/dev_docs/#local-dev-setup","title":"Local dev setup","text":"<p>You can run the documentation via:</p> <pre><code>make startdocs\n</code></pre> <p>You can remove the <code>mkdocs</code> container image by running:</p> <pre><code>make cleandocs\n</code></pre>"},{"location":"development/dev_setup/","title":"Local Dev Setup","text":""},{"location":"development/dev_setup/#prerequisites","title":"Prerequisites","text":"<ul> <li>go version v1.22.0+</li> <li>docker version 17.03+.</li> <li>kubectl version v1.28.0+.</li> </ul>"},{"location":"development/dev_setup/#overview","title":"Overview","text":"<p>The <code>metal-operator</code> is leveraging envtest to conduct and run unit test suites. Additionally, it is using the Redfish Mock Server to run a local mock Redfish instance to simulate operations performed by various reconcilers.</p> <pre><code>graph TD\n    A[Kubernetes Controller Runtime Based Reconcilers] --&gt;|Interacts with| B[envtest Kube-apiserver Environment]\n    A --&gt;|Interacts with| C[Redfish Mock Server]\n    C --&gt;|Runs as a| D[Docker Container]</code></pre>"},{"location":"development/dev_setup/#run-the-local-test-suite","title":"Run the local test suite","text":"<p>The local test suite can be run via </p> <pre><code>make test\n</code></pre> <p>This <code>Makefile</code> directive will start under the hood the Redfish mock server, instantiate the <code>envtest</code> environment and run <code>go test ./...</code> on the whole project.</p>"},{"location":"development/dev_setup/#startstop-redfish-mock-server","title":"Start/Stop Redfish Mock Server","text":"<p>The Redfish mock server can be started and stopped with the following command</p> <pre><code>make startbmc\nmake stopbmc\n</code></pre>"},{"location":"development/dev_setup/#run-the-local-tilt-development-environment","title":"Run the local Tilt development environment","text":""},{"location":"development/dev_setup/#prerequisites_1","title":"Prerequisites","text":"<ul> <li>Tilt v0.33.17+</li> <li>Kind v0.23.0+</li> </ul> <p>The local development environment can be started via</p> <pre><code>make tilt-up\n</code></pre> <p>This <code>Makefile</code> directive will: - create a local Kind cluster with local registry - install cert-manager - install boot-operator to reconcile the <code>ServerBootConfiguration</code> CRD - start the <code>metal-operator</code> controller and Redfish mock server as a sidecar container - an Endpoint resource is created to point to the Redfish mock server - this will result in <code>Server</code> resources being created and reconciled by the <code>metal-operator</code></p> <pre><code>\u2039kind-metal\u203a kubectl get server\nNAME                            UUID                                   MANUFACTURER   POWERSTATE   STATE       AGE\ncompute-0-bmc-endpoint-sample   38947555-7742-3448-3784-823347823834   Contoso        On           Available   3m21s\n</code></pre> <p>The local development environment can be deleted via</p> <pre><code>make kind-delete\n</code></pre>"},{"location":"usage/installation/","title":"Helm Installation Guide","text":"<p>This guide will help you install the Metal Operator using Helm.</p>"},{"location":"usage/installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Kubernetes cluster (v1.16+)</li> <li>Helm (v3.0.0+)</li> </ul>"},{"location":"usage/installation/#steps","title":"Steps","text":"<ol> <li>Install the Chart</li> </ol> <p>Install the Metal Operator chart with the default values.</p> <pre><code>helm install metal-operator dist/chart\n</code></pre> <p>To customize the installation, you can override the default values using a <code>values.yaml</code> file or the <code>--set</code> flag.</p> <pre><code>helm install metal-operator dist/chart -f /path/to/your/values.yaml\n</code></pre> <ol> <li>Verify the Installation</li> </ol> <p>Check the status of the Helm release to ensure that the Metal Operator is installed successfully.</p> <pre><code>helm status metal-operator\n</code></pre> <p>You should see output indicating that the Metal Operator pods are running.</p>"},{"location":"usage/installation/#configuration","title":"Configuration","text":"<p>The <code>values.yaml</code> file allows you to configure various aspects of the Metal Operator. Below are some of the key configurations:</p>"},{"location":"usage/installation/#controller-manager","title":"Controller Manager","text":"Key Description Default Value <code>controllerManager.replicas</code> Number of replicas for the manager deployment <code>1</code> <code>controllerManager.strategy.type</code> Deployment strategy for the manager pod <code>Recreate</code> <code>controllerManager.manager.image.repository</code> Image repository for the manager container <code>controller</code> <code>controllerManager.manager.image.tag</code> Image tag for the manager container <code>latest</code> <code>controllerManager.manager.args</code> Arguments for the manager container <code>--leader-elect</code>, <code>--metrics-bind-address=:8443</code>, <code>--health-probe-bind-address=:8081</code> <code>controllerManager.manager.resources</code> Resource requests and limits for the manager container <code>{cpu: 300m, memory: 200Mi}</code> (limits), <code>{cpu: 300m, memory: 50Mi}</code> (requests) <code>controllerManager.manager.livenessProbe</code> Liveness probe configuration for the manager container <code>{initialDelaySeconds: 15, periodSeconds: 20, httpGet: {path: /healthz, port: 8081}}</code> <code>controllerManager.manager.readinessProbe</code> Readiness probe configuration for the manager container <code>{initialDelaySeconds: 5, periodSeconds: 10, httpGet: {path: /readyz, port: 8081}}</code> <code>controllerManager.manager.securityContext</code> Security context for the manager container <code>{allowPrivilegeEscalation: false, capabilities: {drop: [\"ALL\"]}}</code> <code>controllerManager.podSecurityContext</code> Security context for the manager pod <code>{runAsNonRoot: true, seccompProfile: {type: RuntimeDefault}}</code> <code>controllerManager.terminationGracePeriodSeconds</code> Termination grace period for the manager pod <code>10</code> <code>controllerManager.serviceAccountName</code> Service account name for the manager pod <code>metal-operator-controller-manager</code> <code>controllerManager.hostNetwork</code> Enable host networking for the manager pod <code>true</code> <ul> <li>rbac: Enable or disable RBAC.</li> <li>crd: Enable or disable CRDs.</li> <li>metrics: Enable or disable metrics export.</li> <li>webhook: Enable or disable webhooks.</li> <li>prometheus: Enable or disable Prometheus ServiceMonitor.</li> <li>certmanager: Enable or disable cert-manager injection.</li> <li>networkPolicy: Enable or disable NetworkPolicies.</li> </ul> <p>Refer to the <code>values.yaml</code> file for more details on each configuration option.</p>"},{"location":"usage/installation/#uninstallation","title":"Uninstallation","text":"<p>To uninstall the Metal Operator, run the following command:</p> <pre><code>helm uninstall metal-operator\n</code></pre> <p>This will remove all the resources associated with the Metal Operator.</p>"},{"location":"usage/installation/#additional-information","title":"Additional Information","text":"<p>For more detailed information, refer to the official documentation and Helm chart repository.</p>"},{"location":"usage/metalctl/","title":"metalctl","text":""},{"location":"usage/metalctl/#installation","title":"Installation","text":"<p>Install the <code>metalctl</code> CLI from source without cloning the repository. Requires Go to be installed.</p> <pre><code>go install https://github.com/ironcore-dev/metal-operator/cmd/metalctl@latest\n</code></pre>"},{"location":"usage/metalctl/#commands","title":"Commands","text":""},{"location":"usage/metalctl/#console","title":"console","text":"<p>The <code>metalctl console</code> command allows you to access the serial console of a <code>Server</code>.</p> <p>To open a connection to the <code>Servers</code> serial console run</p> <pre><code>metalctl console my-server\n</code></pre> <p>In order to authenticate against the API server you need either to provide a path to a <code>kubeconfig</code> via <code>--kubeconfig</code> or set the <code>KUBECONFIG</code> environment variable by pointing to an effective <code>kubeconfig</code> file.</p> <p>By default, the serial console on <code>ttyS1</code> will be opened. You can override this by setting <code>--serial-console-number</code>.</p> <p>Additionally, you can skip the host validation by providing the <code>--skip-host-key-validation=true</code> flag. If set to <code>false</code> it is possible provide a custom <code>known_hosts</code> file via the <code>--known-hosts-file</code> flag.</p>"},{"location":"usage/metalctl/#move","title":"move","text":"<p>The <code>metalctl move</code> command allows to move the metal Custom Resources, like e.g. <code>Endpoint</code>, <code>BMC</code>, <code>Server</code>, etc. from one cluster to another.</p> <p>Warning!: Before running <code>metalctl move</code>, the user should take care of preparing the target cluster, including also installing all the required Custom Resources Definitions.</p> <p>You can use:</p> <p><pre><code>metalctl move --source-kubeconfig=\"path-to-source-kubeconfig.yaml\" --target-kubeconfig=\"path-to-target-kubeconfig.yaml\"\n</code></pre> to move the metal Custom Resources existing in all namespaces of the source cluster. In case you want to move the metal Custom Resources defined in a single namespace, you can use the <code>--namespace</code> flag.</p> <p>Status and ownership of a metal Custom Resource is also moved. If a metal Custom Resource present on the source cluster exists on the target cluster with identical specification it won't be moved and no ownership of this object will be set. In case of any errors during the process there will be performed a cleanup and the target cluster will be restored to its previous state.</p> <p>Warning!:  <code>metalctl move</code> has been designed and developed around the bootstrap use case described below, and currently this is the only use case verified .</p> <p>If someone intends to use <code>metalctl move</code> outside of this scenario, it's recommended to set up a custom validation pipeline of it before using the command on a production environment.</p> <p>Also, it is important to notice that move has not been designed for being used as a backup/restore solution and it has several limitation for this scenario, like e.g. the implementation assumes the cluster must be stable while doing the move operation, and possible race conditions happening while the cluster is upgrading, scaling up, remediating etc. has never been investigated nor addressed.</p>"},{"location":"usage/metalctl/#pivot","title":"Pivot","text":"<p>Pivoting is a process for moving the Custom Resources and install Custom Resource Definitions from a source cluster to a target cluster.</p> <p>This can now be achieved with the following procedure:</p> <ol> <li>Use <code>make install</code> to install the metal Custom Resource Definitions into the target cluster</li> <li>Use <code>metalctl move</code> to move the metal Custom Resources from a source cluster to a target cluster</li> </ol>"},{"location":"usage/metalctl/#dry-run","title":"Dry run","text":"<p>With <code>--dry-run</code> option you can dry-run the move action by only printing logs without taking any actual actions. Use <code>--verbose</code> flag to enable verbose logging.</p>"}]}