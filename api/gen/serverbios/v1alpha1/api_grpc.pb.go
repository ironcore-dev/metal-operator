// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: serverbios/v1alpha1/api.proto

package v1alpha1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ServerBIOSService_BIOSScan_FullMethodName          = "/v1alpha1.ServerBIOSService/BIOSScan"
	ServerBIOSService_BIOSSettingsApply_FullMethodName = "/v1alpha1.ServerBIOSService/BIOSSettingsApply"
	ServerBIOSService_BIOSVersionUpdate_FullMethodName = "/v1alpha1.ServerBIOSService/BIOSVersionUpdate"
)

// ServerBIOSServiceClient is the client API for ServerBIOSService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerBIOSServiceClient interface {
	BIOSScan(ctx context.Context, in *BIOSScanRequest, opts ...grpc.CallOption) (*BIOSScanResponse, error)
	BIOSSettingsApply(ctx context.Context, in *BIOSSettingsApplyRequest, opts ...grpc.CallOption) (*BIOSSettingsApplyResponse, error)
	BIOSVersionUpdate(ctx context.Context, in *BIOSVersionUpdateRequest, opts ...grpc.CallOption) (*BIOSVersionUpdateResponse, error)
}

type serverBIOSServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewServerBIOSServiceClient(cc grpc.ClientConnInterface) ServerBIOSServiceClient {
	return &serverBIOSServiceClient{cc}
}

func (c *serverBIOSServiceClient) BIOSScan(ctx context.Context, in *BIOSScanRequest, opts ...grpc.CallOption) (*BIOSScanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BIOSScanResponse)
	err := c.cc.Invoke(ctx, ServerBIOSService_BIOSScan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverBIOSServiceClient) BIOSSettingsApply(ctx context.Context, in *BIOSSettingsApplyRequest, opts ...grpc.CallOption) (*BIOSSettingsApplyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BIOSSettingsApplyResponse)
	err := c.cc.Invoke(ctx, ServerBIOSService_BIOSSettingsApply_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverBIOSServiceClient) BIOSVersionUpdate(ctx context.Context, in *BIOSVersionUpdateRequest, opts ...grpc.CallOption) (*BIOSVersionUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BIOSVersionUpdateResponse)
	err := c.cc.Invoke(ctx, ServerBIOSService_BIOSVersionUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServerBIOSServiceServer is the server API for ServerBIOSService service.
// All implementations should embed UnimplementedServerBIOSServiceServer
// for forward compatibility.
type ServerBIOSServiceServer interface {
	BIOSScan(context.Context, *BIOSScanRequest) (*BIOSScanResponse, error)
	BIOSSettingsApply(context.Context, *BIOSSettingsApplyRequest) (*BIOSSettingsApplyResponse, error)
	BIOSVersionUpdate(context.Context, *BIOSVersionUpdateRequest) (*BIOSVersionUpdateResponse, error)
}

// UnimplementedServerBIOSServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServerBIOSServiceServer struct{}

func (UnimplementedServerBIOSServiceServer) BIOSScan(context.Context, *BIOSScanRequest) (*BIOSScanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BIOSScan not implemented")
}
func (UnimplementedServerBIOSServiceServer) BIOSSettingsApply(context.Context, *BIOSSettingsApplyRequest) (*BIOSSettingsApplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BIOSSettingsApply not implemented")
}
func (UnimplementedServerBIOSServiceServer) BIOSVersionUpdate(context.Context, *BIOSVersionUpdateRequest) (*BIOSVersionUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BIOSVersionUpdate not implemented")
}
func (UnimplementedServerBIOSServiceServer) testEmbeddedByValue() {}

// UnsafeServerBIOSServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerBIOSServiceServer will
// result in compilation errors.
type UnsafeServerBIOSServiceServer interface {
	mustEmbedUnimplementedServerBIOSServiceServer()
}

func RegisterServerBIOSServiceServer(s grpc.ServiceRegistrar, srv ServerBIOSServiceServer) {
	// If the following call pancis, it indicates UnimplementedServerBIOSServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ServerBIOSService_ServiceDesc, srv)
}

func _ServerBIOSService_BIOSScan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BIOSScanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerBIOSServiceServer).BIOSScan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerBIOSService_BIOSScan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerBIOSServiceServer).BIOSScan(ctx, req.(*BIOSScanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerBIOSService_BIOSSettingsApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BIOSSettingsApplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerBIOSServiceServer).BIOSSettingsApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerBIOSService_BIOSSettingsApply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerBIOSServiceServer).BIOSSettingsApply(ctx, req.(*BIOSSettingsApplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerBIOSService_BIOSVersionUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BIOSVersionUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerBIOSServiceServer).BIOSVersionUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerBIOSService_BIOSVersionUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerBIOSServiceServer).BIOSVersionUpdate(ctx, req.(*BIOSVersionUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServerBIOSService_ServiceDesc is the grpc.ServiceDesc for ServerBIOSService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServerBIOSService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1alpha1.ServerBIOSService",
	HandlerType: (*ServerBIOSServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BIOSScan",
			Handler:    _ServerBIOSService_BIOSScan_Handler,
		},
		{
			MethodName: "BIOSSettingsApply",
			Handler:    _ServerBIOSService_BIOSSettingsApply_Handler,
		},
		{
			MethodName: "BIOSVersionUpdate",
			Handler:    _ServerBIOSService_BIOSVersionUpdate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "serverbios/v1alpha1/api.proto",
}
